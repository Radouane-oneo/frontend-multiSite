<?php
use \printconnect\Dal;
use printconnect\Carts\Factory;
use printconnect\Shipping;
use printconnect\Diagnostics\Debug;
use printconnect\Drupal\Forms;
use printconnect\Drupal\Functions;
use printconnect\Products\Options;
use printconnect\Products\Configurations;
use \printconnect\Products\Toolbox;
use \printconnect\Products\PriceGroups;
use \printconnect\Products\Pricing;
use \printconnect\Products;
use \printconnect\PickupPoints;
use printconnect\Customers\Factory as CustomersFactory;
use printconnect\Carts\Discounts;

function pccart_menu() {

// ===== ORDER WEEK HOOKS ================================================================

$items['cart'] = array(
    'page callback' => 'new_cart_loadpage',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/getcart'] = array(
    'page callback' => 'new_cart_ajax_getcart',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/getshippingtypes'] = array(
    'page callback' => 'new_cart_ajax_getshippingtypes',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/removeitem/%'] = array(
    'page callback' => 'new_cart_ajax_removeitem',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/removedesign/%'] = array(
    'page callback' => 'new_cart_ajax_removedesign',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/removefilecheck/%'] = array(
    'page callback' => 'new_cart_ajax_removefilecheck',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/setrefjob'] = array(
    'page callback' => 'new_cart_ajax_setrefjob',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/setemaildesigner'] = array(
    'page callback' => 'new_cart_ajax_setemaildesigner',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/setreforder'] = array(
    'page callback' => 'new_cart_ajax_setreforder',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/selectshippingtype/%'] = array(
    'page callback' => 'new_cart_ajax_selectshippingtype',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);

$items['cart/ajax/applydiscount'] = array(
    'page callback' => 'new_cart_ajax_applydiscount',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);
$items['cart/ajax/removediscount'] = array(
    'page callback' => 'new_cart_ajax_removediscount',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
);
// =======================================================================================

$items['cart/%/submit'] = array(
      'page callback' => '_pccart_callback',
      'page arguments' => array('cart_submit', 1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['cart/additem/submit'] = array(
      'page callback' => 'add_cartitem_submit',
      'page arguments' => array('cart_submit', 1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['cart/customer/ref/%'] = array(
      'page callback' => '_pccart_callback',
      'page arguments' => array('cart_customer_ref', 3),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['cart/%/delete'] = array(
      'page callback' => '_pccart_callback',
      'page arguments' => array('item_delete', 1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['cart/files/%/delete'] = array(
      'page callback' => '_pccart_callback',
      'page arguments' => array('file_delete', 2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items["cart/job/ref/%"] = array(
      'title' => 'edit',
      'page callback' => '_pccart_callback',
      'page arguments' => array('edit_jobref', 3),
      'access arguments' => array('access content'),
  );
  $items["cart/edit/%"] = array(
      'title' => 'edit',
      'page callback' => '_pccart_callback',
      'page arguments' => array('edit', 2),
      'access arguments' => array('access content'),
  );

  $items["cart/discount"] = array(
      'title' => 'Cart callback',
      'page callback' => '_pccart_callback',
      'page arguments' =>array('discount'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['cart/callback'] = array(
      'title' => 'Cart callback',
      'page callback' => 'pccart_callback',
      'page arguments' => array(),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['cart/add/%'] = array(
      'page callback' => '_pccart_add_json',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
   $items['cart/controlprof/%/delete'] = array(
      'page callback' => '_pccart_callback',
      'page arguments' => array('controle_delete', 2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $items['cart/deletedesign/%'] = array(
      'page callback' => '_pccart_callback',
      'page arguments' => array('design_delete', 2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  return $items;

}

// ================================== ORDER WEEK V3 FUNCTIONS ===================================

// main function to load cart page
function new_cart_loadpage() {
    global $language;

    $labels = array(
      'js_key' => t('drupal_tag'),
    );

    header('Cache-Control: public, max-age=' . 3600);

    $script = "<script type='text/javascript'>
        var GlobalPrefix = '".$language->prefix."';
        var GlobalVat = 0.21;
        var isConnected = " . (isset($_SESSION['customerid']) ? 1 : 0) . ";
    </script>";
    
    $script .= '<script data-main="/webapp/js/cart/main" src="/webapp/js/libs/requirejs/require.js"></script>';
    $script .= '<div id="myCart"></div>';

    return $script;
}

// function to get json cart
function new_cart_ajax_getcart() {
    $response = Factory::GetCartJson();

    Dal::BuildJson($response->data);
}

// function to get json of shipping types
function new_cart_ajax_getshippingtypes() {
    $shippingsTypes = printconnect\Carts\Shipping\Factory::GetShippingTypes();

    $shippingsTypes = json_decode($shippingsTypes->data, 1);

    foreach ($shippingsTypes as $key => $type) {
        $label = $type['shippingType']['tag'];
        if ($type['price'] > 0) {
            $label .= '(' . t('!value exc. VAT', array('!value' => theme('price', array('value' => $type['price'], 'free' => TRUE)))) . ' / ' . t('!value inc. VAT', array('!value' => theme('price', array('value' => $type['price'] * (1 + $_SESSION['shop_vat']), 'free' => TRUE)))) . ') *';
        }

        $shippingsTypes[$key]['shippingType']['tag'] = $label;
    }

    Dal::BuildJson($shippingsTypes);
}

function new_cart_ajax_removeitem($itemId) {
    $response = Factory::DeleteItem($itemId);

    Dal::BuildJson(json_decode($response->data, 1));
}

function new_cart_ajax_removedesign($itemId) {
    $response = Factory::DeleteDesign($itemId);

    Dal::BuildJson(json_decode($response->data, 1));
}

function new_cart_ajax_setrefjob() {
    $itemId = $_POST['id'];
    $refJob = $_POST['refJob'];

    $response = Factory::SaveRefJob($itemId, $refJob);
    if($response) {
        Dal::BuildJson();
    }else {
        Dal::BuildJson(array(), 500);
    }
}

function new_cart_ajax_setemaildesigner() {
    $itemId = $_POST['id'];
    $email = $_POST['email'];

    $response = Factory::SaveEmailDesigner($itemId, $email);

    if($response) {
        Dal::BuildJson();
    }else {
        Dal::BuildJson(array(), 500);
    }
}

function new_cart_ajax_setreforder() {
    $cartId = $_POST['cartId'];
    $orderRef = $_POST['orderRef'];

    $response = Factory::SaveRefOrder($cartId, $orderRef);

    if($response) {
        Dal::BuildJson();
    }else {
        Dal::BuildJson(array(), 500);
    }
}

function new_cart_ajax_selectshippingtype($shippingTypeId) {
    $response = printconnect\Carts\Shipping\Factory::SetShippingType($shippingTypeId);

    Dal::BuildJson(json_decode($response->data, 1));
}

function new_cart_ajax_applydiscount() {
    $discountCode = $_POST['code'];
    $response = Factory::ApplyDiscount($discountCode);

    if($response->code == 200) {
        Dal::BuildJson(json_decode($response->data, 1));
    }else {
        Dal::BuildJson(array(), $response->code, $response->data);
    }
}

function new_cart_ajax_removediscount() {
    $discountCode = $_POST['code'];
    $response = Factory::RemoveDiscount($discountCode);

    if($response->code == 200) {
        Dal::BuildJson(json_decode($response->data, 1));
    }else {
        Dal::BuildJson(array(), $response->code, $response->data);
    }
}

function new_cart_ajax_removefilecheck($itemId) {
    $response = Factory::RemoveFileCheck($itemId);

    if($response->code == 200) {
        Dal::BuildJson(json_decode($response->data, 1));
    }else {
        Dal::BuildJson(array(), $response->code, $response->data);
    }
}

// ==============================================================================================

function pccart_progress() {

  return array(
      array(
          'title' => t('Choose a product'),
          'paths' => array('cart'),
          'weight' => 20,
      ),
  );
}

function pccart_block_info() {
  $blocks['cart'] = array(
      'info' => t('Cart'),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['save'] = array(
      'info' => t('Cart save (you just added)'),
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'cart',
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['indicator'] = array(
      'info' => t('Cart indicator'),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['shipping'] = array(
      'info' => t('Cart shipping info'),
      'region' => 'sidebar',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'checkout/*',
      'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;

}

function pccart_block_view($delta = '') {

  printconnect_ensureinitialized();
  switch ($delta) {
    case 'save':
      $cart = Factory::Current();

      $block = FALSE;
      if ($cart && count($cart->orderItems)) {
        $block['title'] = t('You just added');
        $block['content'] = drupal_get_form('pccart_save_form');
      }
      return $block;

      break;
    case 'cart':
      $cart = Factory::Current();
      $block = FALSE;
      $items = array();
      if ($cart && $cart->isFilled) {
        $block['cart'] = $cart;

        foreach ($cart->productItems as $item) {
          $list = array();
          $itemValue = $item->price;
          $configs = $item->configuration->config;

          foreach ($configs as $config) {
            $list[] = $config->groupName . ': ' . $config->name;
          }

          if (0 !== count($item->options)) {
            $optionsText = array();
            foreach ($item->options as $option) {
              $optionsText[] = $option->optionName;
              $itemValue += $option->price;
              $list[] = $option->optionName;
            }
          }

          $content['items'][$item->id] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('item', 'clearfix')),
              '#weight' => 10,
          );

          $content['items'][$item->id]['image'] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('image')),
          );

          foreach ($item->files as $file) {
            if (isset($file->thumbnail)) {
              $content['items'][$item->id]['image']['content'] = array(
                  '#theme' => 'pcfilesthumb',
                  '#file' => $file->thumbnail,
                  '#cache' => FALSE,
              );
            } else {
              $content['items'][$item->id]['image']['content'] = array(
                  '#theme' => 'image',
                  '#path' => $item->product->image,
              );
            }
          }
          $content['items'][$item->id]['description'] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('description')),
          );
          $content['items'][$item->id]['description']['price'] = array(
              '#theme' => 'price',
              '#value' => $itemValue,
          );

          $content['items'][$item->id]['description']['header'] = array(
              '#prefix' => '<h3>',
              '#suffix' => '</h3>',
              '#markup' => $item->quantity . ' ' . $item->configuration->name,
          );

          $content['items'][$item->id]['description']['list'] = array(
              '#theme' => 'item_list',
              '#items' => $list,
          );

        }

        $orderItemsAdditional = $cart->orderItemsAdditional;
        if (count($orderItemsAdditional)) {
          foreach ($orderItemsAdditional as $item) {
            $content['additionalItems'][$item->id] = array(
                'description' => array(
                    '#type' => 'container',
                    '#attributes' => array('class' => array('description', 'item')),
                    'price' => array(
                        '#theme' => 'price',
                        '#value' => $item->price,
                    ),
                    'description' => array(
                        '#markup' => $item->description
                    ),
                ),
            );
          }
        }
        if ($cart->discountItems) {
          foreach ($cart->discountItems as $discount) {
            $content['discounts'][$discount->id] = array(
                '#type' => 'container',
                '#attributes' => array('class' => array('item', 'description', 'discount')),
                '#weight' => 50,
            );

            $content['discounts'][$discount->id]['price'] = array(
                '#theme' => 'price',
                '#value' => $discount->price,
            );

            $content['discounts'][$discount->id]['description'] = array(

                '#markup' => $discount->productName,
            );
          }
        }
        $content['shipping'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('item', 'shipping', 'description')),
            '#weight' => 60,
        );

        $content['shipping']['header'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('clearfix')),
        );

        if ($cart->expectedShippingDate) {
            $content['shipping']['header']['shipping'] = array(
                '#type' => 'item',
                '#attributes' => array('class' => array('clearfix')),
                '#title' => t('My order will be shipped on:'),
                '#markup' => format_date(strtotime($cart->expectedShippingDate), 'short'),
            );
        }


        if ($cart->expectedDeliveryDate) {
          $content['shipping']['header']['delivery'] = array(
              '#type' => 'item',
              '#title' => t('Expected delivery'),
              '#markup' => format_date(strtotime($cart->expectedDeliveryDate), 'short'),
              '#attributes' => array('class' => array('clearfix')),
          );

        }
        $content['shipping']['price'] = array(
            '#theme' => 'price',
            '#value' => $cart->orderItemShipping->price,
            '#free' => TRUE,
        );

        $type = \printconnect\Shipping\Types\Factory::Get($cart->orderItemShipping->shippingTypeResellerShop);

        $content['shipping']['description'] = array(
            '#markup' => $type->shippingType->tag,
        );

        if (count($cart->orderItemsPayment)) {

          foreach ($cart->orderItemsPayment as $payment) {
            $content['payment'][$payment->id] = array(
                '#type' => 'container',
                '#attributes' => array('class' => array('clearfix', 'description', 'item', 'payment-method')),
                '#weight' => 70,
            );

            $content['payment'][$payment->id]['price'] = array(
                '#theme' => 'price',
                '#value' => $payment->price,
                '#free' => TRUE,
            );

            $content['payment'][$payment->id]['description'] = array(
                '#markup' => $payment->description,
            );
          }
        }

        $content['priceblock'] = array('#weight' => 80, '#markup' => theme('priceblock', array('subtotal' => $cart->convertedSubTotalAmount, 'vatAmount' => $cart->convertedVatAmount, 'total' => $cart->convertedTotalAmount, 'attributes' => array('class' => array('last')))));

        $content['priceblock'] = array(
            '#weight' => 80,
            '#theme' => 'priceblock',
            '#subtotal' => $cart->convertedSubTotalAmount,
            '#vatAmount' => $cart->convertedVatAmount,
            '#total' => $cart->convertedTotalAmount,
        );

        $content['#attributes']['class'][] = 'cart';

        $block['content'] = $content;
        $block['title'] = t('Shopping cart');
      }
      return $block;
      break;

    case 'shipping':
      $cart = Factory::Current();
      $block = FALSE;
      $items = array();

      if ($cart && $cart->isFilled) {
        $block['cart'] = $cart;
        $block['title'] = t('Delivery');
        $content['shipping'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('shipping')),
            'content' => array(
                '#type' => 'item',
                '#title' => t('Your order is ready for shipment'),
                '#markup' => format_date(strtotime($cart->expectedShippingDate), 'short'),
            ),
        );

        $content['delivery'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('delivery')),
            'content' => array(
                '#type' => 'item',
                '#title' => t('Expected delivery'),
                '#markup' => format_date(strtotime($cart->expectedDeliveryDate), 'short'),
            ),
        );


        $block['content'] = $content;
      }
      return $block;
      break;

    case 'indicator':
      $cart = Factory::Current();
      $baseContent = $content = t('Cart');
      $number = 0;
      foreach($cart->orderItems as $job) {
	if ($job->discountId == null) {
	    $number++;
	}
      }

      if ($cart) {
        $content .= ' (' . $number . ')';
      } else {
        $content .= ' (0)';
      }
      $block['content'] = l($content, 'cart', array('attributes' => array(
	    'class' => array('button', 'cart', 'cartCounter'),
	    'TranslatedText' => $baseContent,
	    'number' => $number)));

      return $block;
      break;
  }
  return FALSE;
}


function pccart_form_pcproducts_config_form_alter(&$form, &$form_state, $form_id) {

  global $pccart_editItemId;

  if (isset($form_state['storage']['qty']) && isset($form_state['storage']['priceGroupId'])) {
    if ($form_state['storage']['edit']) {

      $form['actions']['addToCart'] = array(
          '#type' => 'submit',
          '#value' => t('Update'),
          '#weight' => 100,
          '#validate' => array('pccart_addtocart_validate2'),
          '#submit' => array('pccart_editcartitem_submit'),
          '#attributes' => array('class' => array('action', 'cart', 'large', 'display-block')),
      );
      $form_state['storage']['cart']['itemId'] = $form_state['storage']['edit'];
    } else {
      $form['actions']['addToCart'] = array(
          '#type' => 'submit',
          '#value' => t('Add to cart'),
          '#weight' => 100,
          '#validate' => array('pccart_addtocart_validate2'),
          '#submit' => array('pccart_addtocart_submit2'),
          '#attributes' => array('class' => array('action', 'cart', 'large', 'display-block')),
      );
    }
  }
  return true;

}

function pccart_addtocart_validate($form, &$form_state) {

  if (!$form_state['storage']['quantity'] && !$form_state['values']['quantity']) {
    form_set_error(NULL, t('Please select a quantity'));
  }

}

function pccart_addtocart_submit($form, &$form_state) {

  $options = array();
  $priceGroupId = $form_state['values']['priceGroupId'];
  if (isset($form_state['values']['options'])) {
    foreach ($form_state['values']['options'] as $key => $value) {
      if ($value) {
        $options[] = $key;
      }
    }
  }
  $productId = $form_state['storage']['productId'];
  $qty = $form_state['values']['quantity'];
  if (!$qty) {
    $qty = $form_state['storage']['quantity'];
  }
  $vatpercentage = FALSE;
  if (isset($form_state['storage']['vatpercentage'])) {
    $vatpercentage = $form_state['storage']['vatpercentage'];
  }
  _pccart_add($productId, $qty, $options, $priceGroupId, $vatpercentage);

}

function pccart_addtocart_validate2($form, &$form_state) {

  $qty = $form_state['storage']['quantity'];
  if (!$qty) {
    $qty = $form_state['values']['quantity'];
    if ('custom' == $qty) {
      $qty = $form_state['values']['custom'];
    }
  }
  if (!is_numeric($qty)) {
    form_set_error('', t('Please select a quantity'));
  }

}

function pccart_addtocart_submit2($form, &$form_state) {
  $options = array();
  $priceGroupId = $form_state['storage']['priceGroupId'];
  $options = $form_state['storage']['options'];
  $productId = $form_state['storage']['productId'];
  $qty = $form_state['storage']['quantity'];
  if (!$qty) {
    $qty = $form_state['values']['quantity'];
    if ('custom' == $qty) {
      $qty = $form_state['values']['custom'];
    }
  }
  $vatpercentage = FALSE;
  if (isset($form_state['storage']['vatpercentage'])) {
    $vatpercentage = $form_state['storage']['vatpercentage'];
  }
  _pccart_add($productId, $qty, $options, $priceGroupId, $vatpercentage);

}

function pccart_editcartitem_submit($form, &$form_state) {

  $itemId = $form_state['storage']['cart']['itemId'];
  $options = array();
  $priceGroupId = $form_state['values']['priceGroupId'];
  $priceGroupId = isset($priceGroupId)?$priceGroupId :$form_state['storage']['priceGroupId'];

  if (isset($form_state['values']['options'])) {
    foreach ($form_state['values']['options'] as $key => $value) {
      if ($value) {
        $options[] = $key;
      }
    }
  }

  $productId = $form_state['storage']['productId'];
  $qty = $form_state['storage']['quantity'];

  if (!$qty) {
    $qty = $form_state['values']['quantity'];
    if ('custom' == $qty) {
      $qty = $form_state['values']['custom'];
    }
  }

  $items = $form_state['storage']['items'];
  $cart = Factory::Current();
  $item = Factory::GetItem($cart, $itemId);
  $item->EnsureLoaded();

  if (isset($_SESSION['cart']['items'][$itemId]['template'])) {
    $templates = Products\Templates\Factory::GetTemplates($productId, $items);
    if (count($templates->items)) {
      $template = $templates->items[0];
      if ($template->id != $_SESSION['cart']['items'][$itemId]['template']) {
        Factory::DeleteItem($itemId, $cart);
        $item = Factory::CreateItem($cart, $priceGroupId, $qty, '', array(), $options);
      }
    }
  }

  $item->productPriceGroupId = $priceGroupId;
  $item->quantity = $qty;
  $item->options = $options;
  $vatpercentage = FALSE;
  if (isset($form_state['storage']['vatpercentage'])) {
    $vatpercentage = $form_state['storage']['vatpercentage'];
    $item->vatCustom = $vatpercentage;
  }
  Factory::SaveItem($item);
  Factory::Refresh($cart);
  unset($_SESSION['cart']['items'][$itemId]);
  drupal_goto('cart');

}

function pccart_editcartitem_submit2($form, &$form_state) {
  $itemId = $form_state['storage']['cart']['itemId'];
  $priceGroupId = $form_state['storage']['priceGroupId'];
  $options = $form_state['storage']['options'];
  $qty = $form_state['storage']['quantity'];
  $cart = Factory::Current();
  if ($cart) {
    $item = Factory::GetItem($cart, $itemId);
    $item->EnsureLoaded();

    $item->productPriceGroupId = $priceGroupId;
    $item->quantity = $qty;
    $item->options = $options;
    $vatpercentage = FALSE;
    if (isset($form_state['storage']['vatpercentage'])) {
      $vatpercentage = $form_state['storage']['vatpercentage'];
      $item->vatCustom = $vatpercentage;
    }
    Factory::SaveItem($item);
    Factory::Refresh($cart);
    unset($_SESSION['cart']['items'][$itemId]);
  }
  drupal_goto('cart');

}

function _pccart_add($productId, $qty, $options, $priceGroupId, $vat = FALSE) {

  $customer = CustomersFactory::Current();
  $cart = Factory::CurrentOrCreate();

  if (!$cart) {
    $cart = Factory::Create();
    if ($customer) {
      $cart->customerId = $customer->id;
      Factory::Save($cart);
    }
  }
  $relatedProducts = array();
  $description = '';
  $cart->productId = $productId;
  $item = Factory::CreateItem($cart, $priceGroupId, $qty, $description, $relatedProducts, $options, $vat);
  $cart->orderItems[] = $item;
  Factory::Refresh($cart);
  drupal_goto('cart');
}

function add_cartitem_submit() {
  if(!isset($_POST)) {
    drupal_not_found();
  }

  $productId = $_POST['productId'];
  $qty = $_POST['quantity'];
  $options = explode(',', $_POST['options']);
  $priceGroupId = $_POST['priceGroupId'];
  $widthCF = $_POST['widthCF'];
  $heightCF = $_POST['heightCF'];
  $cf = $_POST['CF'];
  $vat = false;
  $customer = CustomersFactory::Current();
  $cart = Factory::CurrentOrCreate();

  if (!$cart) {
    $cart = Factory::Create();
    if ($customer) {
      $cart->customerId = $customer->id;
      Factory::Save($cart);
    }
  }

  $relatedProducts = array();
  $description = '';
  $cart->productId = $productId;
  Factory::CreateItem($cart, $priceGroupId, $qty, $description, $relatedProducts, $options, $vat, $widthCF, $heightCF, $cf);
  Factory::Refresh($cart);

  drupal_goto('cart');

}

function _pccart_callback() {

  global $pccart_editItemId;
  $pccart_editItemId = FALSE;
  try {
    $args = func_get_args();
    $page = array_shift($args);
    switch ($page) {
      case 'cart_customer_ref':
	$cartId = array_shift($args);
	$ref = $_POST['ref'];
	$cart = Factory::Current();
	$cart->customer_reference = $ref;
	Factory::saveInCache($cart, array(
            'customer_reference' => $ref,
	    'customerReference' => $ref,
        ));
	printconnect\Carts\Factory::SaveCustomData($cart);
      break;
      case 'edit_jobref':
	$orderItem = array_shift($args);
	$ref = $_POST['ref'];
	if ($orderItem) {
	   $cart = Factory::Current();
           $cartItem = printconnect\Carts\Factory::GetItem($cart, $orderItem);
	   $cartItem->refJob = $ref;
	   foreach($cart->orderItems as $key => $orderItem) {
	       if ($orderItem->id = $cartItem->id) {
	           $cart->orderItems[$key] = $cartItem;
		   break;
	       }
	   }

	   Factory::saveInCache($cart, array(
            'order_items' => $cart->orderItems,
           ));

	   printconnect\Carts\Factory::SaveCustomData($cartItem);
	}
      break;
      case 'cart_submit':
        $cart = Factory::Current();
        $types = array_shift($args);
        $data = array("cart"=>$cart->id,"shipping_type"=> $types);
        $jsondata  = json_encode($data);
        $apikey = variable_get('pc_apikey');
        $url = variable_get('pc_url');
        $url .= "shipping-type/?apikey=$apikey&language=10";
        $header = array('Content-Type' => 'application/x-www-form-urlencoded');
        $response = drupal_http_request($url, array('header' => $header, 'method' => 'POST', 'data' => $jsondata));
        $response = json_decode($response->data);
        if (isset($response->id) && $response->id != null) {
  	    $cartAmounts = $response->cartAmount;
        $_SESSION['defaultindex'] = $types;
  	    Factory::saveInCache($cart, array(
            'shipping_type' => $types,
        		'orderItemShipping' => $response,
            'subTotalAmount' => $cartAmounts->subTotalAmount,
        		'subTotalAmount' => $cartAmounts->subTotalAmount,
        		'vatAmount' => $cartAmounts->vatAmount,
        		'totalAmount' => $cartAmounts->totalAmount,
  	        'pickuppoint' => null,
  	    ));
	    $_SESSION['shipping']['object'] = $response;
	    unset($_SESSION['cart']['shipping']['pup']);
         }
      case 'cartblock':
        $cart = Factory::Current();
        $action = array_shift($args);
        $property = array_shift($args);
        if ($action == 'set') {
          switch ($property) {
            case 'shippingType' :
              $cart->shipping_type = array_shift($args);
              break;
            case 'pickuppoint' :
              $countryCode = array_shift($args);
              $id = array_shift($args);
              $cart->shipping_type = array_shift($args);
              $pickuppoint = PickupPoints\Factory::Get($id, $countryCode);
              $pickuppoint->EnsureLoaded();
              $cart->pickuppoint = $pickuppoint;
              break;
            case 'paymentMethod':
              $cart->payment_method = array_shift($args);
              break;
          }
          Factory::Save($cart);
        }

        print theme('pccart_cartblock_form', drupal_get_form('pccart_cartblock_form'));
        exit;
      case 'cart_add':
        $args = arg();
        array_shift($args);
        array_shift($args);
        $productId = array_shift($args);
        $items = array_shift($args);
        if ($items) {
          $items = explode(',', $items);
        } else {
          $items = array();
        }
        $qty = array_shift($args);
        $options = array_shift($args);
        if ($options) {
          $options = explode(',', $options);
        } else {
          $options = array();
        }
        _pccart_add($productId, $items, $qty, $options);
        return 'added';
        break;
       case 'discount':
        $code = $_POST['code'];
        $force = isset($_POST['force']) ? $_POST['force'] : 0;
      	if ($code != null) {
            $cart = Factory::Current();
            $orderItems = $cart->orderItems;
            $data = array("order"=>$cart->id,"code"=> $code, "force" => $force);
            $jsondata = json_encode($data);
            $apikey = variable_get('pc_apikey');
            $url = variable_get('pc_url');
            $url .= "order-discount-code/?apikey=$apikey&language=10";
            $header = array('Content-Type' => 'application/x-www-form-urlencoded');
            $jsonResponse = drupal_http_request($url, array('header' => $header, 'method' => 'POST', 'data' => $jsondata));
            $response = json_decode($jsonResponse->data);
            if (isset($response->orderItemDiscount) && $response->orderItemDiscount != null) {
                $deleted = NULL;
                foreach ($orderItems as $key => $value) {
                    if($value->discountId == $code) {
                        $deleted = $value;
                        unset($orderItems[$key]);
                    }
                }
                $orderItems[] = $response->orderItemDiscount;
                $cart->orderItems = $orderItems;
    	          $cartAmounts = $response->cartAmount;
                Factory::saveInCache($cart, array(
                    'orderItems' => $orderItems,
    		            'subTotalAmount' => $cartAmounts->subTotalAmount,
                    'vatAmount' => $cartAmounts->vatAmount,
                    'totalAmount' => $cartAmounts->totalAmount,
                ));
    	      }else {
                $deleted = NULL;
                foreach ($orderItems as $key => $value) {
                    if($value->discountId == $code) {
                        $deleted = $value;
                        unset($orderItems[$key]);
                    }
                }
                if($deleted) {
                  $cart->orderItems = $orderItems;
                  $cartAmounts = $response->cartAmount;
                  Factory::saveInCache($cart, array(
                      'orderItems' => $orderItems,
                      'subTotalAmount' => $cart->subTotalAmount + $deleted->price,
                      'vatAmount' => ($cart->subTotalAmount + $deleted->price) * 0.21,
                      'totalAmount' => ($cart->subTotalAmount + $deleted->price) * 1.21,
                  ));
                }
            }

            echo $jsonResponse->data;die;
	     }
      break;
      case 'item_delete':
        $itemId = array_shift($args);
        $cart = Factory::Current();
        Factory::DeleteItem($itemId, $cart);
        if (isset($_SESSION['files'][$itemId])){
          unset($_SESSION['files'][$itemId]);
        }
       break;
      case 'design_delete':
	$itemId = array_shift($args);
	try {
            Factory::DeleteItemFile($itemId);
    	} catch (\printconnect\Rest\Exceptions\Exception $ex) {
    	}
      break;
	case 'controle_delete' :
            $itemId = array_shift($args);
            $cart = Factory::Current();
            if ($itemId) {
                $cartItem = printconnect\Carts\Factory::GetItem($cart, $itemId);
                printconnect\Carts\Factory::LoadItem($cartItem);
                $cartItem->fileCheck = array();
                printconnect\Carts\Factory::SaveItem($cartItem);
            }
	break;
      case 'file_delete':
        $itemId = array_shift($args);
        if (isset($_SESSION['files'][$itemId])) {
          unset($_SESSION['files'][$itemId]);
        }
	if ($itemId) {
	    printconnect\Carts\Factory::DeleteItemFile($itemId);
	}
        return t('The file was deleted');
        break;
      case 'discount_delete':
        $cartId = array_shift($args);
        $discountId = array_shift($args);
        $cart = Factory::Current();
        Discounts\Factory::Delete($cartId, $discountId);
        drupal_goto($_SERVER['HTTP_REFERER']);
        return t('The discount was deleted');
      case 'edit':
        $itemId = array_shift($args);
        $cart = Factory::Current();
        if (!$cart) {
          drupal_goto('cart');
          exit;
        }
        $item = Factory::GetItemFromCart($cart, $itemId);
        $productId = $item->configuration->productId;
        $items = array();
        foreach ($item->configuration->config as $config) {
          $items[] = $config->toolboxItemId;
        }

        $options = array();
        foreach ($item->options as $option) {
          $options[] = $option->option;
        }
        $qty = $item->quantity;
        $pccart_editItemId = $itemId;

        return drupal_get_form('pcproducts_product_form', $productId, $items, $options, $qty, $item);

        break;

    }
  } catch (Exception $ex) {
    return Functions::HandleException($ex);
  }
}

function pccart_save_form($form, &$form_state) {

  $item = FALSE;
  $cart = Factory::Current();

  if ($cart && count($cart->orderItems) && $cart->orderItems[0]) {
    foreach ($cart->orderItems as $cartitem) {
      if ($cartitem->productPriceGroupId) {
        $item = $cartitem;
      }
    }

    if ($item) {
      $itemValue = $item->price;
      $list = array();
      $priceGroup = PriceGroups\Factory::Get($item->productPriceGroupId);
      $priceGroup->EnsureLoaded();
      $configs = $item->configuration->config;

      foreach ($configs as $config) {
        $list[] = '<label>' . $config->groupName . ':</label>  ' . $config->name;
      }

      foreach ($item->options as $option) {
        $itemValue += $option->price;
        $list[] = $option->optionName;
      }

      $pricings = Pricing\Factory::GetPricings($priceGroup->id);
      $upgrade = FALSE;
      $more = 0;

      foreach ($pricings as $pricing) {
        if ($pricing->quantity > $item->quantity) {
          $upgrade = $pricing->quantity;
          $more = $pricing->sellPrice - $item->price;
          break;
        }
      }

      $form['description'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('description')),
      );
      $form['description']['price'] = array(
          '#theme' => 'price',
          '#value' => $itemValue,
      );

      $form['description']['header'] = array(
          '#prefix' => '<h3>',
          '#suffix' => '</h3>',
          '#markup' => $item->quantity . ' ' . $item->configuration->name,
      );


      if ($upgrade) {

        $form['upgrade'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('upgrade')),
        );

        $form['upgrade']['text'] = array(
            '#markup' => t('Upgrade now to %qty ex. for only !price more', array('%qty' => $upgrade, '!price' => theme('price', array('value' => $more)))),
        );
        $form['upgrade']['actions'] = array(
            '#type' => 'actions',
        );
        $form['upgrade']['actions']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Yes, upgrade and save!'),
            '#attributes' => array('class' => array('large', 'display-block')),
        );
      }

      $form_state['storage']['qty'] = $upgrade;
      $form_state['storage']['id'] = $item->id;
    }
  }
  return $form;
}

function pccart_save_form_submit($form, &$form_state) {

  if (isset($form_state['storage']['id']) && isset($form_state['storage']['qty'])) {
    $cart = Factory::Current();
    $item = Factory::GetItem($cart, $form_state['storage']['id']);
    $item->EnsureLoaded();
    $item->quantity = $form_state['storage']['qty'];
    $item->cart_item = $item->id;
    Factory::SaveItem($item);
    Factory::Refresh($cart);
  }

}

function pccart_callback() {

  if (isset($_GET['userKey'])) {
    $customerId = $_GET['userKey'];
    $hash = $_GET['hash'];
    $verification = sha1($customerId . 'agD04vQPx1?FSspl');
    if ($hash == $verification) {
      pccustomersbase_login($customerId);
    }
  }

  if (isset($_GET['w']) && isset($_GET['h'])) {
    $w = $_GET['w'];
    $h = $_GET['h'];

    print '<script type="text/javascript">
	var addedWidth = 20 + parseInt('.$w.');
    var docWt = 0, docScrollWidth, docOffsetWidth;
    var doc =top.document;
    if (doc.body.scrollWidth)
      docWt = docScrollWidth= doc.body.scrollWidth;
    else
      docWt = docOffsetWidth = doc.body.offsetWidth;
    if (docScrollWidth && docOffsetWidth) docHt = Math.max(docScrollWidth, docOffsetWidth);
    var offSet = Math.round((docWt- ' . $w . ')/2);
    if(offSet < 10){
        offSet = 10;
    }
    top.jQuery("#fancybox-wrap").css({left: offSet + "px"});
    top.jQuery("#fancybox-inner").width(' . $w . ');
    top.jQuery("#fancybox-inner").height(' . $h . ');
    top.jQuery("#fancybox-wrap").width(' . $w . ');
    top.jQuery("#fancybox-wrap").height(' . $h . ');
    top.jQuery("#fancybox-content").width(addedWidth);
    top.jQuery("#fancybox-content").height(' . $h . ');
	top.jQuery("#fancybox-frame").width(' . $w . ');
    </script>';
    exit;
  }

  $doClose = 0;
  if (isset($_GET['doClose'])) {
    $doClose = $_GET['doClose'];
  }
  switch ($doClose) {
    case 2:
    case 1:
      print update_domain();
      print '<script type="text/javascript">top.location = top.location;</script>';
      break;
    default:
      if (!isset($_GET['versionsaved'])) {
        $file = $_GET['fileid'];
        $thumbnail = $_GET['thumbid'];
        $id = $_GET['id'];
        $jobId = $_GET['jobid'];
        $cartId = $_GET['cartid'];
        $controlpro = isset($_GET['controlpro']) ? $_GET['controlpro'] : 0;
        $quickupload = isset($_GET['quickupload']) ? $_GET['quickupload'] : 0;

        if (isset($_GET['myPcId']) && $_GET['myPcId']) {
          $_SESSION['savedDesigns'][$id] = $_GET['myPcId'];
        }

        $cart = Factory::Current();
        $customer = CustomersFactory::Current();
        if (!$cart) {
          $cart = Factory::Create();
          if ($customer) {
            $cart->customerId = $customer->id;
            Carts\Factory::Save($cart);
          }
        }
        $cart = Factory::Get($cartId);
        $item = Factory::GetItem($cart, $id);
        $item->EnsureLoaded();
        $item->file = $file;
        $item->thumbnail = $thumbnail;
        $item->design_tool_job_id = $jobId;
        $item->cart_item = $id;
        $item->controlpro = $controlpro;
        $item->quickupload = $quickupload;
        Factory::SaveItem($item);
        Factory::Refresh($cart);
        print update_domain();
        print '<script type="text/javascript">top.location = "' . url('cart') . '";</script>';
        break;
      }
  }

  exit;
}

function _pccart_add_json($json) {

  $cart = Factory::Current();
  if (!$cart) {
    $cart = Factory::Create();
  }

  $object = json_decode($json);

  foreach ($object->items as $item) {
    $item = Factory::CreateItem($cart, $item->productPriceGroupId, $item->quantity, '', array(), $item->options, $item->vat);
    $cart->orderItems[] = $items;
  }

  if (isset($object->codes)) {
    foreach ($object->codes as $code) {
      try {
        $discount = Discounts\Factory::Create($cart->id, $code);
        Discounts\Factory::Save($discount);
        $cart = Factory::Refresh($cart);
      } catch (\printconnect\Rest\Exceptions\Exception $ex) {
        drupal_set_message(t($ex->errors[0]), 'error');
      }
    }
  }
  Factory::Refresh($cart);
  drupal_goto('cart');

  return print_r($object, true);
}



function pccart_form_pccustomers_loginas_form_alter(&$form, &$form_state, $form_id) {

  $customer = $form_state['storage']['customer'];
  if ($customer) {
    $form['getcart'] = array(
        '#type' => 'submit',
        '#submit' => array('pccart_form_pccustomers_loginas_form_submit'),
        '#value' => t('Get latest cart'),
    );
  }

}

function pccart_form_pccustomers_loginas_form_submit($form, &$form_state) {

  $customer = $form_state['storage']['customer'];
  if ($customer) {
    $cart = Factory::GetLast($customer->id);
    try {
      $cart->EnsureLoaded();
      if ($cart) {
        $_SESSION['cartid'] = $cart->id;
        drupal_set_message('Last cart loaded');
      }
    } catch (\Exception $ex) {
      drupal_set_message('No cart found');
    }
  }

}

function pccart_loggedin($customerId) {

  $cart = Factory::Current();
  if ($cart) {
    if ($customerId != $cart->customer) {
      $cart->customer = $customerId;
      $cart->onlyAttachCustomer = TRUE;
      Factory::Save($cart);
    }
  } else {
    $cart = Factory::GetLast($customerId);
    try {
      $cart->EnsureLoaded();
      if ($cart) {
        $_SESSION['cartid'] = $cart->id;
      }
    } catch (\Exception $ex) {

    }
  }

}

function pccart_loggedout() {

  try {
    $cart = Factory::Current();
    if ($cart) {
      $cart->Remove('customer');
      $cart->storeCredit = 0;
      Factory::Save($cart);
    }
  } catch (\Exception $ex) {
  }
}
