<?php

use \printconnect\Dal;
use printconnect\Carts\Factory as CartsFactory;
use printconnect\Diagnostics\Debug;
use printconnect\Drupal\Forms;
use printconnect\Drupal\Functions;
use printconnect\Customers\Addresses;
use printconnect\Customers;
use printconnect\Carts;
use printconnect\PaymentMethods;
use printconnect\PickupPoints;
use printconnect\Products\Options;
use printconnect\Products\Configurations;
use \printconnect\Products\Toolbox;
use \printconnect\Products\PriceGroups;
use \printconnect\Products;
use printconnect\Customers\BillingAccounts;
use printconnect\Customers\VatException\Factory;

function pccheckout_theme() {
  return array(
      'pccheckout_forgotpassword_form' => array(
          'render element' => 'form',
          'template' => 'pccheckout-forgotpassword-form',
      ),
       'addressshippingTypes' => array(
          'variables' => array(
              'addressshippingTypes' => NULL,
              'attributes' => array(),
          ),
      ),
  );
 
}

function theme_addressshippingTypes($vars) {
  $address = $vars['addressshippingTypes'];
  $attributes = $vars['attributes'];
  $attributes['class'][] = 'address';
  
 
  if ($address) {
    $result['address'] = array(
        '#type' => 'container',
        '#attributes' => $attributes,
    );

    if ($address->adress->city) {
      $result['address']['city'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('city')),
      );
      $result['address']['city']['content'] = array(
          '#markup' => $address->adress->city,
      );
    }

    if (isset($address->adress->street) && $address->adress->street) {
      $result['address']['street'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('street')),
      );
      $result['address']['street']['content'] = array(
          '#markup' => $address->adress->street,
      );
    }

    if (isset($address->adress->postalCode) && $address->adress->postalCode) {

    $result['address']['postalCode'] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('postalCode')),
          );
    $result['address']['postalCode']['content'] = array(
        '#markup' => $address->adress->postalCode,
      );
    }

    if (isset($address->adress->phone) && $address->adress->phone) {
      $result['address']['phone'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('phone')),
      );
      $result['address']['phone']['content'] = array(
          '#markup' => $address->adress->phone,
      );
    }
    
     if ($address->shippingType->tag) {
      $result['address']['tag'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('tag')),
      );
      $result['address']['tag']['content'] = array(
          '#markup' => $address->shippingType->tag,
      );
    }

  }
  return drupal_render($result);
}

function pccheckout_progress() {
  return array(
      array(
          'title' => t('Your contact information'),
          'paths' => array('checkout', 'checkout/personal', 'checkout/upload', 'checkout/invoiceanddelivery', 'checkout/shipping'),
          'weight' => 40,
      ),
      array(
          'title' => t('Payment'),
          'paths' => array('checkout/payment'),
          'weight' => 60,
      ),
  );
}

function pccheckout_access() {
  printconnect_ensureinitialized();
  $customer = \printconnect\Customers\Factory::Current();
  if ($customer) {
    return TRUE;
  }
  return FALSE;
}

function pccheckout_menu() {

      // ===== ORDER WEEK HOOKS ================================================================
     $items['checkout/saveNeutralShipping'] = array(
          'page callback' => 'save_neutral_shipping',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );
     
     $items['checkout/getBillingAccoutFromVat'] = array(
          'page callback' => 'new_checkout_check_vatnumber',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );
      
      $items['checkout/countriesList'] = array(
          'page callback' => 'new_checkout_and_delivery_counties',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );
      
      $items['checkout/savenewinvoiceanddelivery'] = array(
          'page callback' => 'save_new_checkout_and_delivery_loadpage',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );
      
      $items['checkout/invoiceanddelivery'] = array(
          'page callback' => 'new_checkout_and_delivery_loadpage',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
          'title' => t('Invoice and delivery')
      );

      $items['checkout/ajax/getshippingaddresses'] = array(
          'page callback' => 'new_checkout_ajax_getshippingaddresses',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );

      $items['checkout/ajax/getbillingaccounts'] = array(
          'page callback' => 'new_checkout_ajax_getbillingaccounts',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );

      $items['checkout/ajax/saveshippingaddress'] = array(
          'page callback' => 'new_checkout_ajax_saveshippingaddress',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );

      $items['checkout/ajax/submitcheckout'] = array(
          'page callback' => 'new_checkout_submit_all_form',
          'page arguments' => array(),
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );

      // =======================================================================================

      $items['checkout'] = array(
          'title' => 'Checkout',
          'page callback' => 'pccheckout_redirect',
          'page arguments' => array('main'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      $items['checkout/login'] = array(
          'title' => 'Login',
          'page callback' => 'pccheckout_login',
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      $items['checkout/personal'] = array(
          'title' => 'Personal',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_personal_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );
      
      $items['checkout/upload'] = array(
          'title' => 'Upload',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_upload_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      $items['checkout/payment'] = array(
          'title' => 'Payment',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_payment_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );
      $items["invoceform/%"] = array(
      'page callback' => '_pccheckout_callback',
      'page arguments' =>array('invoceform', 1),
      'access arguments' => array('access content'),
  );

    $items["shipping/%"] = array(
      'page callback' => '_pccheckout_callback',
      'page arguments' =>array('shipping', 1),
      'access arguments' => array('access content'),
  );
    $items["billingAccountVat/%"] = array(
      'page callback' => '_pccheckout_callback',
      'page arguments' =>array("billingAccountVat", 1 ),
      'access arguments' => array('access content'),
  );
    $items["Methods/%"] = array(
      'page callback' => '_pccheckout_callback',
      'page arguments' =>array("paymentMethods", 1 ),
      'access arguments' => array('access content'),
  );
  return $items;
}

// ================================== ORDER WEEK V3 FUNCTIONS ===================================
function save_new_checkout_and_delivery_loadpage() {
    $data = array(
        'name' => $_POST['name'],
        'street' => $_POST['street'],
        'postalCode' => $_POST['postalCode'],
        'city' => $_POST['city'],
        'country' => $_POST['country']
    );
    
    $customer = printconnect\Customers\Factory::Current();
    if ($customer) {
        $data['customer'] = $customer->id;
    }
    
    if (isset($_POST['vatNumber']) && !empty($_POST['vatNumber'])) {
        $data['vatNumber'] = $_POST['vatNumber'];
        $data['company'] = $_POST['company'];
    }
    
    if (isset($_POST['id']) && $_POST['id'] != 0) {
        $data['id'] = $_POST['id'];
    }
     $response = \printconnect\Customers\BillingAccounts\Factory::SaveNewBillingAccount($data);
    if($response) {
        Dal::BuildJson($response->data);
    }else {
        Dal::BuildJson(array(), 500);
    }
}

function new_checkout_and_delivery_loadpage() {
     global $language;

    $labels = array(
      'js_key' => t('drupal_tag'),
    );

    $script = "<script type='text/javascript'>
        var GlobalPrefix = '".$language->prefix."';
        var GlobalVat = 0.21;
        var isConnected = " . (isset($_SESSION['customerid']) ? 1 : 0) . ";
    </script>";
    
    $script .= '<link rel="stylesheet" href="/webapp/js/libs/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />';
    $script .= '<script data-main="/webapp/js/checkout/main" src="/webapp/js/libs/requirejs/require.js"></script>';
    $script .= '<div id="myCheckout"></div>';

    return $script;
}

function new_checkout_ajax_getshippingaddresses() {
    $shippings = \printconnect\Shipping\Types\Factory::GetCustomerShippingAddresses();
    $selected = \printconnect\Shipping\Types\Factory::GetSelectedShipping();


    Dal::BuildJson(array(
        'orderItemShipping' => json_decode($selected->data, 1),
        'addresses' => json_decode($shippings->data, 1)
    ));
}

function new_checkout_ajax_saveshippingaddress() {
    $response = \printconnect\Shipping\Types\Factory::SaveOrderShippingAddresses($_POST);

    Dal::BuildJson(json_decode($response->data, 1));
}

function new_checkout_ajax_getbillingaccounts() {
    $response = \printconnect\Customers\BillingAccounts\Factory::GetCustomerBillingAccounts();

    Dal::BuildJson(json_decode($response->data, 1)); 
}

function new_checkout_and_delivery_counties(){
    $response = \printconnect\Countries\Factory::GetCountriesList();
    Dal::BuildJson(json_decode($response->data, 1));
}

function new_checkout_check_vatnumber() {
    $vatNumber = $_GET['vatNumber'];
    $response = \printconnect\Customers\BillingAccounts\Factory::CheckExistingVatNumber($vatNumber);
    Dal::BuildJson(json_decode($response->data, 1));
}

function save_neutral_shipping(){
    $neutral = ($_POST['neutral'] == 'true') ? 1: 0;
    $response = \printconnect\Carts\Factory::saveNeutralShipping($neutral);
    Dal::BuildJson(json_decode($response->data, 1));
}

function new_checkout_submit_all_form()
{
    if(isset($_POST['shipping-detail-delivery-type']) && $_POST['shipping-detail-delivery-type'] == "deliveryTypePickup") {
        $data['name'] = $_POST['shipping-detail-contact'];
        $data['id'] = $_POST['shipping-detail-id'];
        $data['deliverytype'] = $_POST['shipping-detail-delivery-type'];

        $response = \printconnect\Shipping\Types\Factory::SaveOrderShippingAddresses($data);
    }else if(isset($_POST['customer-first-address-id'])) {
        $data['id'] = $_POST['customer-first-address-id'];
        $response = \printconnect\Shipping\Types\Factory::SaveOrderShippingAddresses($data);
        var_dump($response);die;
    }
    
    drupal_goto('checkout/payment');
}
// ==============================================================================================

function _pccheckout_set_callback($value) {
    $cart = Carts\Factory::Current();
    $types = \printconnect\Shipping\Types\Factory::GetAll();
    switch($value){
      case 'pickup':
        foreach ($types as $type) {
            if ($type->isPickup) {
            $cart->shipping_type = $type->id;
            }
        }
        $cart->pickuppoint = FALSE;
      break;       
      default:
        foreach ($types as $type) {
            if (!$type->isPickup && $type->shippingType->deliveryType != 'deliveryTypePostal') {
              $cart->shipping_type = $type->id;
              break;
            }
        }
        $cart->pickuppoint = FALSE;
      break;  
    }   
    Carts\Factory::Save($cart);
    drupal_goto('checkout/shipping');
}

function _pccheckout_callback() {
  
  _pccustomers_ensureloggedin();
  $args = func_get_args();
  $page = array_shift($args);
  $id = end($args);
  switch ($page) {
 case 'paymentMethods':
        $cart = Carts\Factory::Current();
        $idpaymentMethods = array_shift($args);
        $data = array("cart"=>$cart->id,"paymentMethodId"=> $idpaymentMethods);
        $jsondata  = json_encode($data);
        $apikey = variable_get('pc_apikey');
        $url = variable_get('pc_url');
        $url .= "payment-method/?apikey=$apikey&language=10";
        $header = array('Content-Type' => 'application/x-www-form-urlencoded');
        $response = drupal_http_request($url, array('header' => $header, 'method' => 'POST', 'data' => $jsondata));
        $response = json_decode($response->data);
break;
   case 'invoceform':
        $apikey = variable_get('pc_apikey');
        $url = variable_get('pc_url');
        $url .= "billing-account/id/".$id."?apikey=$apikey&language=10";
        $header = array('Content-Type' => 'application/x-www-form-urlencoded');
        $response = drupal_http_request($url, array('header' => $header, 'method' => 'GET'));
        echo $response->data;die;
  break;
case 'shipping':
        $apikey = variable_get('pc_apikey');
        $url = variable_get('pc_url');
        $url .= "customer-address/id/".$id."?apikey=$apikey&language=10";
        $header = array('Content-Type' => 'application/x-www-form-urlencoded');
        $response = drupal_http_request($url, array('header' => $header, 'method' => 'GET'));
        echo $response->data;die;
break;
case 'billingAccountVat':
    $val = end($args);
    try {
     $billingAccount = \printconnect\Customers\BillingAccounts\Factory::Get($val);
         \printconnect\Customers\BillingAccounts\Factory::LoadBillingAccountVat($billingAccount);
        if($billingAccount->number){
        $data = array(
        'status' => 'exicte',
        'name'=> $billingAccount->name,
        'company'=> $billingAccount->company,
        'street' => $billingAccount->street,
        'postalCode' => $billingAccount->postalCode,
        'city' => $billingAccount->city,
        'number'=>$billingAccount->number ,
        'id'=>$billingAccount->id,
         );
            drupal_json_output($data);
        }
    } catch (Exception $exc) {
            drupal_json_output("NewVat");
    }

exit();
break;

  }

}

function pccheckout_payment_form_build_methods(&$form, $form_state, $element = array('payment', 'method')) {
  $cart = $form_state['storage']['cart'];
  $customer = $form_state['storage']['customer'];
  $paymentMethods = $form_state['storage']['paymentmethods'];

  $options = array();
  $methods = array();

  $default = $cart->payment_method;

  $first = FALSE;

  foreach ($paymentMethods as $value) {
    if (
            ($cart->onlyPostal && strtolower($value->paymentMethod->internalName) == 'cod' ) ||
            (strtolower($value->paymentMethod->internalName) == 'invoice' && (!$customer->freeOfCashPayment || !($cart->hasProperty('billingAccount')))) ||
            (strtolower($value->paymentMethod->internalName) == 'cod' && $cart->totalAmount > 1200)
    ) {

    } else {
      if (!$first) {
        $first = $value->id;
      }

      $subTotalWithoutPayment = $cart->subTotalAmountWithoutPayment;
      $cost = $value->CalculateCost($subTotalWithoutPayment);

      $options[$value->id] = ''; //t($value->paymentMethod->internalName);

      if (is_string($value->paymentMethod->descriptionTag)) {
        $description = $value->paymentMethod->descriptionTag;
      } else {
        $description = '';
      }

      $methods[$value->id] = array(
          'image' => theme('image', array('path' => printconnect_getimage('paymentmethods', $value->paymentMethod->internalName))),
          'name' => $value->paymentMethod->tag,
          'filler' => array('data' => '', 'class' => array('filler')),
          'cost' => theme('price', array('value' => $cost, 'block' => TRUE, 'free' => TRUE)),
          'description' => $value->paymentMethod->descriptionTag,
      );
    }
  }

  $form['payment']['method']['table']['#options'] = $methods;
  $form['payment']['method']['table']['#attributes'] = array('class' => array('grid', 'clearfix', 'rows-' . count($methods), 'payment-methods-table'));

  if (array_key_exists($default, $options)) {
    $form['payment']['method']['table']['#default_value'] = $default;
  } else {
    $form['payment']['method']['table']['#default_value'] = FALSE;
  }
if ($cart->subTotalAmount <= 0) {
    hide($form['payment']['method']);
    hide($form['payment']['header']);
    $form['payment']['header']['#required'] = FALSE;
  } else {
    show($form['payment']['method']);
    show($form['payment']['header']);
    $form['payment']['header']['#required'] = TRUE;
  }
}

function _pccheckout_vatnumber($value) {
  if (strlen($value) >= 2) {
    $country = substr($value, 0, 2);
    return substr($value, 2);
  } else {
    $country = '';
    return $value;
  }
}
