<?php

use printconnect\Carts\Factory as CartsFactory;
use printconnect\Diagnostics\Debug;
use printconnect\Drupal\Forms;
use printconnect\Drupal\Functions;
use printconnect\Customers\Addresses;
use printconnect\Customers;
use printconnect\Carts;
use printconnect\PaymentMethods;
use printconnect\PickupPoints;
use printconnect\Products\Options;
use printconnect\Products\Configurations;
use \printconnect\Products\Toolbox;
use \printconnect\Products\PriceGroups;
use \printconnect\Products;
use printconnect\Customers\BillingAccounts;
use printconnect\Customers\VatException\Factory;

function pccheckout_theme() {
  return array(/*
        'pccheckout_checkout_form' => array(
        'render element' => 'form',
        'template' => 'pccheckout-checkout-form',
        ),
        'pccheckout_login_form' => array(
        'render element' => 'form',
        'template' => 'pccheckout-login-form',
        ),
        'pccheckout_personal_form' => array(
        'render element' => 'form',
        'template' => 'pccheckout-personal-form',
        ),
        'pccheckout_pickup_form' => array(
        'render element' => 'form',
        'template' => 'pccheckout-pickup-form',
        ),
        'pccheckout_delivery_form' => array(
        'render element' => 'form',
        'template' => 'pccheckout-delivery-form',
        ),
        'pccheckout_payment_form' => array(
        'render element' => 'form',
        'template' => 'pccheckout-payment-form',
        ), */
      'pccheckout_forgotpassword_form' => array(
          'render element' => 'form',
          'template' => 'pccheckout-forgotpassword-form',
      ),
       'addressshippingTypes' => array(
          'variables' => array(
              'addressshippingTypes' => NULL,
              'attributes' => array(),
          ),
      ),
  );
 
}

function theme_addressshippingTypes($vars) {
  $address = $vars['addressshippingTypes'];
  $attributes = $vars['attributes'];
  $attributes['class'][] = 'address';
  
 
  if ($address) {
    $result['address'] = array(
        '#type' => 'container',
        '#attributes' => $attributes,
    );

    if ($address->adress->city) {
      $result['address']['city'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('city')),
      );
      $result['address']['city']['content'] = array(
          '#markup' => $address->adress->city,
      );
    }

    if (isset($address->adress->street) && $address->adress->street) {
      $result['address']['street'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('street')),
      );
      $result['address']['street']['content'] = array(
          '#markup' => $address->adress->street,
      );
    }

    if (isset($address->adress->postalCode) && $address->adress->postalCode) {

    $result['address']['postalCode'] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('postalCode')),
          );
    $result['address']['postalCode']['content'] = array(
        '#markup' => $address->adress->postalCode,
      );
    }

    if (isset($address->adress->phone) && $address->adress->phone) {
      $result['address']['phone'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('phone')),
      );
      $result['address']['phone']['content'] = array(
          '#markup' => $address->adress->phone,
      );
    }
    
     if ($address->shippingType->tag) {
      $result['address']['tag'] = array(
          '#type' => 'container',
          '#attributes' => array('class' => array('tag')),
      );
      $result['address']['tag']['content'] = array(
          '#markup' => $address->shippingType->tag,
      );
    }

  }
  return drupal_render($result);
}

function pccheckout_progress() {
  return array(
      array(
          'title' => t('Your contact information'),
          'paths' => array('checkout', 'checkout/personal', 'checkout/upload', 'checkout/invoiceanddelivery', 'checkout/shipping'),
          'weight' => 40,
      ),
      array(
          'title' => t('Payment'),
          'paths' => array('checkout/payment'),
          'weight' => 60,
      ),
  );
}

function pccheckout_access() {
  printconnect_ensureinitialized();
  $customer = \printconnect\Customers\Factory::Current();
  if ($customer) {
    return TRUE;
  }
  return FALSE;
}

function pccheckout_menu() {
  switch (variable_get('pc_flow', '')) {

    case 'flyer':
      $items['checkout'] = array(
          'title' => 'Checkout',
          'page callback' => 'pccheckout_redirect',
          'page arguments' => array('main'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      $items['checkout/login'] = array(
          'title' => 'Login',
          'page callback' => 'pccheckout_login',
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      $items['checkout/personal'] = array(
          'title' => 'Personal',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_personal_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );


      $items['checkout/invoiceanddelivery'] = array(
          'title' => 'Invoice and delivery',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_invoiceanddelivery_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      $items['checkout/upload'] = array(
          'title' => 'Upload',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_upload_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      $items['checkout/payment'] = array(
          'title' => 'Payment',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_payment_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.forms.inc',
      );

      break;

    default:

      $items['checkout'] = array(
          'title' => 'Checkout',
          'page callback' => '_pccheckout_callback',
          'page arguments' => array('main'),
          'access arguments' => array('access content'),
      );

      $items['checkout/personal'] = array(
          'title' => 'Personal',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_personal_form'),
          'access arguments' => array('access content'),
          'file' => 'pccheckout.form.inc',
      );

      $items['checkout/shipping'] = array(
          'title' => 'Shipping',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_shipping_form'),
          'access callback' => 'pccheckout_access',
          'access arguments' => array('access content'),
          'file' => 'pccheckout.form.inc',
      );

      $items['checkout/shipping/pickup'] = array(
          'title' => 'Pickup',
          'page callback' => '_pccheckout_set_callback',
          'page arguments' => array('shipping', 'pickup'),
          //'access callback' => 'pccheckout_access',
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );

      $items['checkout/shipping/delivery'] = array(
          'title' => 'Delivery',
          'page callback' => '_pccheckout_set_callback',
          'page arguments' => array('shipping', 'delivery'),
          //'access callback' => 'pccheckout_access',
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
      );

      $items['checkout/payment'] = array(
          'title' => 'Payment',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('pccheckout_payment_form2'),
//          'access callback' => 'pccheckout_access',
          'access arguments' => array('access content'),
          'file' => 'pccheckout.form.inc',
      );

      break;
  }
  return $items;
}

function pccheckout_form_pccart_cart_form_alter(&$form, $form_state, $form_id) {

  $cart = $form_state['storage']['cart'];
  if ($cart && $cart->isFilled) {
    $form['checkout'] = array(
        '#prefix' => '<div class="button-wrapper">',
        '#suffix' => '</div>',
        '#type' => 'submit',
        '#value' => t('Secure payment'),
        '#weight' => 100,
        '#attributes' => array('class' => array('action', 'large', 'checkout', 'button')),
        '#submit' => array('pccheckout_pccart_cart_form_submit'),
    );


    /*
      $form['checkout'] = array(
      '#type' => 'markup',
      '#markup' => l(t('Secure payment'), 'checkout', array('attributes' => array('class' => array('button', 'action', 'large', 'checkout')))),
      '#weight' => 100,
      );
     */
  }
}

function pccheckout_pccart_cart_form_submit($form, $form_state) {
  $cart = $form_state['storage']['cart'];
  if ($cart->onlyPostal) {
    $cart->shipping_type = $form_state['storage']['shipping']['type'];
  } else {
    switch ($form_state['storage']['shippingType']) {
      case 'shippingTypeBpostPickupPoint':
        $poi = \printconnect\bPost\Factory::Get($form_state['values']['pup']['id']);
        $poi->EnsureLoaded();
        $cart->pickuppoint = $poi->cartObject();
        break;
      case 'shippingTypeMondialRelay':
        $pickuppoint = PickupPoints\Factory::Get($form_state['values']['pup']['id'], $form_state['values']['pup']['countryCode']);
        $pickuppoint->EnsureLoaded();
        $cart->pickuppoint = $pickuppoint;
        break;
      default:
        $cart->pickuppoint = FALSE;
    }
//    if ($cart->isPickup && isset($form_state['values']['pup']['id']) && !empty($form_state['values']['pup']['id'])) {
//      $pickuppoint = PickupPoints\Factory::Get($form_state['values']['pup']['id'], $form_state['values']['pup']['countryCode']);
//      $pickuppoint->EnsureLoaded();
//      $cart->pickuppoint = $pickuppoint;
//    } else {
//      $cart->pickuppoint = FALSE;
//    }
// $cart->shipping_type = $form_state['storage']['shipping']['type'];
  }
  Carts\Factory::Save($cart);
  Carts\Factory::Refresh($cart);
  drupal_goto('checkout');
}

function pccheckout_form_pccart_cart_form2_alter(&$form, $form_state, $form_id) {
    $cart = printconnect\Carts\Factory::Current();
    if ($cart && $cart->isFilled) {
        if ($cart->supplementProduct == 1) {
            $form['actions']['checkout'] = array(
                '#prefix' => '<div class="button-wrapper">',
                '#suffix' => '</div>',
                '#type' => 'submit',
                '#value' => t('Secure payment'),
                '#weight' => 100,
                '#attributes' => array('class' => array('action', 'large', 'payment', 'button')),
            );

            $submit = $form['#submit'];
            $submit[] = 'pccheckout_pccart_cart_form2_submit';
            $form['#submit'] = $submit;
        } else {
            $form['actions']['checkout'] = array(
                '#prefix' => '<div class="button-wrapper">',
                '#suffix' => '</div>',
                '#markup' => '<input class="action large payment button form-submit ui-button ui-widget ui-state-default ui-corner-all popupOverlay" type="button" id="edit-actions-checkout" name="op" value="Secure payment" role="button">'
            );
        }


        /*
          $form['checkout'] = array(
          '#type' => 'markup',
          '#markup' => l(t('Secure payment'), 'checkout', array('attributes' => array('class' => array('button', 'action', 'large', 'checkout')))),
          '#weight' => 100,
          );
         */
    }
}

function pccheckout_pccart_cart_form2_validate($form, $form_state) {
  $cart = Carts\Factory::Current(FALSE);
 //ne pas supprimer c pour tva6%
//    foreach($cart->orderItems as $orderItem){
//       if ($form_state['values']['cart']['items'][$orderItem]['description']['tva']['case'] == 1){
//          $orderItem->vat = 0.06;
//          $orderItem->priceIncVAT = $orderItem->price * (1 + 0.06);
//       }  
//    }
//   
//  \printconnect\Carts\Factory::Save($cart);
//  \printconnect\Carts\Factory::Refresh($cart);
}

function pccheckout_pccart_cart_form2_submit($form, $form_state) {
  drupal_goto('checkout');
}

function _pccheckout_set_callback($property, $value) {
  if ($property == 'shipping') {
    $cart = Carts\Factory::Current();
    $types = \printconnect\Shipping\Types\Factory::GetAll();
    if ($value == 'pickup') {
      foreach ($types as $type) {
        if ($type->isPickup) {
          $cart->shipping_type = $type->id;
        }
      }
      $cart->pickuppoint = FALSE;
    } else {
      foreach ($types as $type) {
        if (!$type->isPickup && $type->shippingType->deliveryType != 'deliveryTypePostal') {
          $cart->shipping_type = $type->id;
          break;
        }
      }
      $cart->pickuppoint = FALSE;
    }
    Carts\Factory::Save($cart);
  }
  drupal_goto('checkout/shipping');
}

function _pccheckout_callback() {
  _pccustomers_ensureloggedin();
  $args = func_get_args();
  $page = array_shift($args);
  $arg = array_shift($args);
  $customer = Customers\Factory::Current();

  switch ($page) {
    case 'main' :
      if (!$customer) {
        drupal_goto('checkout/login');
      } else {
        drupal_goto('checkout/personal');
      }

      break;
    case 'shipping':
      if ($arg == 'delivery') {
        $cart->shipping_address = $address->id;
        $cart->Remove('pickuppoint');
        Carts\Factory::Save($cart);
        drupal_goto('checkout/shipping');
      }
      if ($arg == 'pickup') {
        $types = \printconnect\Shipping\Types\Factory::GetAll();
        foreach ($types as $type) {
          if (!$type->isPickup) {
            $cart->shipping_type = $type->id;
          }
        }
// $cart->pickuppoint = FALSE;
        Carts\Factory::Save($cart);

        drupal_goto('checkout/shipping');
        exit;
      }
      break;
  }


  return drupal_get_form('pccheckout_checkout_form', $page);
}

function pccheckout_forgotpassword_form($form, $form_state) {
  $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#required' => TRUE,
      '#size' => 40,
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#attributes' => array('class' => array('button', 'large', 'continue')),
  );

  return $form;
}

function pccheckout_forgotpassword_form_validate($form, &$form_state) {
  try {
    $customer = Customers\Factory::GetByEmail($form_state['values']['email']);
    if ($customer) {
      $form_state['storage']['customer'] = $customer;
      return true;
    } else {
      form_set_error('', t('Email not found.'));
      return false;
    }
  } catch (\printconnect\Dal\Exception $ex) {
    Forms::HandleException($ex, $form, '');
    return FALSE;
  }
}

function pccheckout_forgotpassword_form_submit($form, $form_state) {
  $customer = $form_state['storage']['customer'];
  Customers\Factory::RequestNewPassword($customer);

  print '<script type="text/javascript">top.' . $_GET['callback'] . '();</script>';
  exit;
}

function pccheckout_checkout_form($form, &$form_state, $step) {
  drupal_add_js('misc/collapse.js');
  drupal_add_js('misc/form.js');
  $cart = Carts\Factory::Current(FALSE);

  if (!$cart || !$cart->isFilled) {
    drupal_goto('cart');
    exit;
  }

  foreach ($cart->productItems as $item) {
    if (!count($item->files)) {
      drupal_set_message(t('Please upload a file for all your items'), 'warning');
      drupal_goto('cart');
      exit;
    }
  }

//$cart = Carts\Factory::Current();
  $customer = Customers\Factory::Current();
  $shopConfig = \printconnect\Shop\Configuration\Factory::Current();
  $defaultCountry = \printconnect\Countries\Factory::Get($shopConfig->defaultCountry);
  $defaultCountryCode = $defaultCountry->iso;


  $countries = array();
  $deliveryCountries = array();

  $shippingTypes = \printconnect\Shipping\Types\Factory::GetAll();
  foreach ($shippingTypes as $type) {
    if ($cart->orderItemShipping->shippingTypeResellerShop == $type->id) {
      $form_state['storage']['shippingType'] = $type->shippingType->type;
      $shippingType = $type->shippingType->type;
    }
  }
  $items = printconnect\Countries\Factory::GetAll();
  foreach ($items as $country) {
    $countries[$country->id] = $country->tag;
    if ($country->active && ($shippingType <> 'shippingTypeBpostHome' || $country->id == 21)) {
      $deliveryCountries[$country->id] = $country->tag;
    }
  }
  if ($customer && $customer->firstName != '') {
    $form['logout'] = array(
        '#type' => 'item',
        '#markup' => l(t('Not @firstName? Click here...', array('@firstName' => $customer->firstName)), 'myprintconnect/logout/checkout'),
    );
  }

  $defaultShippingAddress = FALSE;
  $defaultBillingAddress = FALSE;

  $addresses = array();

  $addresses[0] = ' - ' . t('New') . ' - ';

  if (!$customer) {
//<editor-fold defaultstate="collapsed" desc="Login">
    if (isset($form_state['values']['login']['options'])) {
      $option = $form_state['values']['login']['options'];
    } else {
      $option = 'new';
    }
    $form['login']['options'] = array(
        '#type' => 'radios',
        '#default_value' => $option,
        '#options' => array(
            'existing' => t("I'm a customer already"),
            'new' => t("I'm not a customer yet"),
        ),
    );

    $form['login']['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#required' => TRUE,
        '#size' => 30,
        '#attributes' => array('class' => array('customer-email')),
    );
    $form['login']['password'] = array(
        '#type' => 'password',
        '#title' => t('Your password'),
        '#required' => TRUE,
        '#size' => 30,
    );

    $form['login']['option']['#value'] = $option;

    if ($option == 'existing') {
      $form['login']['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Login'),
          '#attributes' => array('class' => array('action', 'button', 'large', 'login')),
          '#validate' => array('pccheckout_checkout_form_login_validate'),
          '#submit' => array('pccheckout_checkout_form_login_submit'),
          '#limit_validation_errors' => array(array('login')),
      );
    }

    if ($option == 'new') {
      $form['login']['register'] = array(
          '#type' => 'submit',
          '#value' => t('Register'),
          '#attributes' => array('class' => array('action', 'button', 'large', 'register')),
          '#validate' => array('pccheckout_checkout_form_register_validate'),
          '#submit' => array('pccheckout_checkout_form_register_submit'),
          '#limit_validation_errors' => array(array('login')),
      );
      $form['login']['password']['#title'] = t('Choose your password');
    }
//</editor-fold>
  } else {
//<editor-fold defaultstate="collapsed" desc="Personal">

    $firstName = '';
    $lastName = '';

    if ($customer) {
      $firstName = $customer->firstName;
      $lastName = $customer->lastName;
    }
    $form['personal']['firstName'] = array(
        '#type' => 'textfield',
        '#title' => t('First name'),
        '#required' => TRUE,
        '#size' => 30,
        '#default_value' => $firstName,
    );
    $form['personal']['lastName'] = array(
        '#type' => 'textfield',
        '#title' => t('Last name'),
        '#required' => TRUE,
        '#size' => 30,
        '#default_value' => $lastName,
    );
    $form['personal']['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Mobile number'),
        '#required' => TRUE,
        '#size' => 30,
        '#default_value' => $customer ? $customer->phone : '',
    );
    $form['personal']['submit'] = array(
        '#name' => 'personal-submit',
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#attributes' => array('class' => array('action', 'button', 'large', 'continue')),
        // '#validate' => array('pccheckout_checkout_form_personal_validate'),
        '#submit' => array('pccheckout_checkout_form_personal_submit'),
        '#limit_validation_errors' => array(array('personal')),
    );

//</editor-fold>


    foreach (Addresses\Factory::GetAddresses($customer) as $address) {
      if ($address->company != '') {
        $addresses[$address->id] = $address->company;
      } else {
        $addresses[$address->id] = $address->name;
      }
      if (!$defaultShippingAddress && $address->defaultShipping) {
        $defaultShippingAddress = $address;
        $form_state['storage']['defaultShippingAddress'] = $defaultShippingAddress ? $defaultShippingAddress : FALSE;
      }
      if (!$defaultBillingAddress && $address->defaultBilling) {
        $defaultBillingAddress = $address;
      }
    }
  }

  if ($cart && $cart->isPickup) {
//<editor-fold defaultstate="collapsed" desc="Pickup">
    /*
      $form['shipping']['pickup']['name']['#value'] = '';
      $form['shipping']['pickup']['address']['#value'] = '';
      $form['shipping']['pickup']['postalCode']['#value'] = '';
      $form['shipping']['pickup']['city']['#value'] = '';
      $form['shipping']['pickup']['openinghours']['#value'] = '';
      $form['shipping']['pickup']['selected']['#value'] = FALSE;

      $pickuppoint = FALSE;

      if ($cart->pickuppoint) {

      $pickuppoint = PickupPoints\Factory::Get($cart->pickuppoint->id, $cart->pickuppoint->country);
      $form['shipping']['pickup']['name']['#value'] = $pickuppoint->name;
      $form['shipping']['pickup']['address']['#value'] = $pickuppoint->address;
      $form['shipping']['pickup']['postalCode']['#value'] = $pickuppoint->postalCode;
      $form['shipping']['pickup']['city']['#value'] = $pickuppoint->city;
      $form['shipping']['pickup']['openinghours']['#value'] = $pickuppoint->openingHoursArray;
      $form['shipping']['pickup']['selected']['#value'] = TRUE;
      } else {
      $form['shipping']['pickup']['new'] = array(
      '#markup' => l(t('Choose a pickup point in your neighbourhood'), 'pickuppoints/picker', array('attributes' => array('class' => array('open', 'button', 'choose', 'iframe')), 'query' => array('callback' => 'pccheckout_picker_callback'))),
      );
      }

      $form['shipping']['pickup']['another'] = array(
      '#markup' => l(t('Choose another pickup point in your neighbourhood'), 'pickuppoints/picker', array('attributes' => array('class' => array('open', 'button', 'choose', 'iframe')), 'query' => array('callback' => 'pccheckout_picker_callback'))),
      );
     */
    $form['shipping']['pickup']['id'] = array(
        '#type' => 'hidden',
        '#default_value' => $cart->pickuppoint['id'],
        '#attributes' => array('class' => array('id')),
    );

    $form['shipping']['pickup']['country'] = array(
        '#type' => 'hidden',
        '#default_value' => $cart->pickuppoint['country'],
        '#attributes' => array('class' => array('country-code')),
    );

    $form['shipping']['pickup']['contact'] = array(
        '#type' => 'textfield',
        '#title' => t('Who will pick up your print work?'),
        '#required' => TRUE,
        '#default_value' => $customer ? $customer->name : '',
        '#size' => 30,
    );

    $form['shipping']['pickup']['sms'] = array(
        '#type' => 'textfield',
        '#title' => t('SMS'),
        '#default_value' => $customer ? $customer->phone : '',
        '#size' => 30,
    );

    $form['shipping']['pickup']['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#default_value' => $customer ? $customer->email : '',
        '#size' => 30,
    );
    /*
      $form['pickup']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#attributes' => array('class' => array('action', 'button', 'large', 'continue')),
      '#validate' => array('pccheckout_checkout_form_pickup_validate'),
      '#submit' => array('pccheckout_checkout_form_pickup_submit'),
      '#limit_validation_errors' => array(array('personal'), array('pickup')),
      );
     */
    $form['shipping']['pickup']['neutral'] = array(
        '#type' => 'checkbox',
        '#title' => t('Neutral shipping'),
        '#default_value' => $cart->neutralShipping,
    );

//</editor-fold>
  } else {
//<editor-fold defaultstate="collapsed" desc="Delivery">


    if ($cart && $cart->HasProperty('shipping_address') && !$cart->isPickup) {
      $defaultShippingAddress = Addresses\Factory::Get($cart->shipping_address);
      $defaultShippingAddress->EnsureLoaded();
    }
    $form['shipping']['delivery']['address'] = array(
        '#type' => 'select',
        '#title' => t('Address'),
        '#options' => $addresses,
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->id : 0,
    );
//  }

    $form['shipping']['delivery']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#required' => TRUE,
        '#size' => 30,
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->name : ($customer ? $customer->name : ''),
    );

    $form['shipping']['delivery']['company'] = array(
        '#type' => 'textfield',
        '#title' => t('Company'),
        '#required' => FALSE,
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->company : '',
        '#size' => 30,
    );
    $form['shipping']['delivery']['street'] = array(
        '#type' => 'textfield',
        '#title' => t('Street'),
        '#required' => TRUE,
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->street : '',
        '#size' => 30,
    );
    $form['shipping']['delivery']['postalCode'] = array(
        '#type' => 'textfield',
        '#title' => t('Postal code'),
        '#required' => TRUE,
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->postalCode : '',
        '#size' => 30,
    );
    $form['shipping']['delivery']['city'] = array(
        '#type' => 'textfield',
        '#title' => t('City'),
        '#required' => TRUE,
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->city : '',
        '#size' => 30,
    );
    $form['shipping']['delivery']['country'] = array(
        '#type' => 'select',
        '#title' => t('Country'),
        '#required' => TRUE,
        '#empty_value' => 0,
        '#options' => $deliveryCountries,
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->country : $defaultCountry->id,
    );
    $form['shipping']['delivery']['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone'),
        '#default_value' => $defaultShippingAddress ? $defaultShippingAddress->phone : ($customer ? $customer->phone : ''),
        '#size' => 30,
    );
    /*
      $form['delivery']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#attributes' => array('class' => array('action', 'button', 'large', 'continue')),
      //'#validate' => array('pccheckout_checkout_form_delivery_validate'),
      '#submit' => array('pccheckout_checkout_form_delivery_submit'),
      '#limit_validation_errors' => array(array('personal'), array('delivery')),
      );
     */
    $form['shipping']['delivery']['neutral'] = array(
        '#type' => 'checkbox',
        '#title' => t('Neutral shipping'),
        '#default_value' => $cart ? $cart->neutralShipping : false,
    );

//</editor-fold>
  }
//<editor-fold defaultstate="collapsed" desc="Invoice">
//$defaultBillingAddress = FALSE;
  $defaultNeedInvoice = FALSE;

  if ($cart && $cart->HasProperty('billing_address')) {
    $defaultBillingAddress = Addresses\Factory::Get($cart->billing_address);
    $defaultBillingAddress->EnsureLoaded();
    $defaultNeedInvoice = TRUE;
  }

  $form['invoice']['invoicewrapperclass']['#value'] = ($defaultNeedInvoice ? '' : 'hidden');

  $required = FALSE;
  if (isset($form_state['values']['invoice']) && $form_state['values']['invoice']['needinvoice']) {
    $form['invoice']['invoicewrapperclass']['#value'] = '';
    $required = TRUE;
  }


  $form['invoice']['needinvoice'] = array(
      '#type' => 'checkbox',
      '#default_value' => $defaultNeedInvoice,
      '#title' => t('I need an invoice for my tax collector'),
  );

  $form['invoice']['address'] = array(
      '#type' => 'container',
      '#id' => 'invoice-address',
      '#states' => array(
          'invisible' => array(
              'input[name="invoice[needinvoice]"]' => array('checked' => FALSE),
          ),
      ),
  );
//  if ($customer) {
//    $addresses = array();
//
//    $addresses[0] = ' - ' . t('New') . ' - ';
//    foreach (Addresses\Factory::GetAddresses($customer, true) as $address) {
//      $address->EnsureLoaded();
//      if ($address->company != '') {
//        $addresses[$address->id] = $address->company;
//      } else {
//        $addresses[$address->id] = $address->name;
//      }
//      if (!$defaultBillingAddress && $address->defaultBilling) {
//        $defaultBillingAddress = $address;
//      }
//    }

  $form['invoice']['address']['address'] = array(
      '#type' => 'select',
      '#title' => t('Address'),
      '#options' => $addresses,
      '#default_value' => $defaultBillingAddress ? $defaultBillingAddress->id : 0,
  );
//  }

  $states = array(
      'required' => array(
          'input[name="invoice[needinvoice]"]' => array('checked' => TRUE),
      ),
  );

  $form['invoice']['address']['company'] = array(
      '#type' => 'textfield',
      '#title' => t('Company'),
      '#default_value' => $defaultBillingAddress ? $defaultBillingAddress->company : '',
      '#size' => 30,
      '#states' => $states,
  );
  $form['invoice']['address']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#size' => 30,
      '#default_value' => $defaultBillingAddress ? $defaultBillingAddress->name : ($customer ? $customer->name : ''),
      '#states' => $states,
  );
  $form['invoice']['address']['street'] = array(
      '#type' => 'textfield',
      '#title' => t('Street'),
      '#default_value' => $defaultBillingAddress ? $defaultBillingAddress->street : '',
      '#size' => 30,
      '#states' => $states,
  );
  $form['invoice']['address']['postalCode'] = array(
      '#type' => 'textfield',
      '#title' => t('PC and city'),
      '#default_value' => $defaultBillingAddress ? $defaultBillingAddress->postalCode : '',
      '#size' => 30,
      '#states' => $states,
  );
  $form['invoice']['address']['city'] = array(
      '#type' => 'textfield',
      '#title' => t('City'),
      '#title_display' => 'invisible',
      '#default_value' => $defaultBillingAddress ? $defaultBillingAddress->city : '',
      '#size' => 30,
      '#states' => $states,
  );
  $form['invoice']['address']['country'] = array(
      '#type' => 'select',
      '#title' => t('Country'),
      '#options' => $countries,
      '#default_value' => $defaultBillingAddress ? $defaultBillingAddress->country : $defaultCountry->id,
      '#states' => $states,
  );

  if ($defaultBillingAddress) {
    $country = printconnect\Countries\Factory::Get($defaultBillingAddress->country);
  } else {
    $country = FALSE;
  }


  $form['invoice']['address']['vatNumber'] = array(
      '#type' => 'vatfield',
      '#title' => t('Vat number'),
      '#attributes' => array('class' => array('vat')),
      '#default_value' => $defaultBillingAddress ? ($defaultBillingAddress->vatNumber != '' ? $defaultBillingAddress->vatNumber : $country->iso) : $defaultCountry->iso,
  );

  $form['invoice']['address']['reference'] = array(
      '#type' => 'textfield',
      '#title' => t('Reference'),
      //    '#required' => TRUE,
      '#default_value' => $cart ? $cart->customerReference : '',
      '#size' => 30,
  );

  $form['shipping']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#attributes' => array('class' => array('action', 'button', 'large', 'continue')),
      '#validate' => array('pccheckout_checkout_form_shipping_validate'),
      '#submit' => array('pccheckout_checkout_form_shipping_submit'),
      '#limit_validation_errors' => array(array('personal'), array('shipping', 'delivery'), array('shipping', 'pickup'), array('invoice')),
  );

//</editor-fold>
//<editor-fold defaultstate="collapsed" desc="Payment">


  if ($cart && $cart->subTotalAmount > 0) {

    $paymentMethods = PaymentMethods\Factory::GetAll();

    $options = array();
    $methods = array();

    $default = $cart->payment_method;

    $first = FALSE;


    foreach ($paymentMethods as $value) {
//      if (!(strtolower($value->paymentMethod->internalName) == 'invoice') ||
//              ( $customer && $customer->freeOfCashPayment
//              && isset($form_state['values']['payment']['needinvoice'])
//              && $form_state['values']['payment']['needinvoice'] == TRUE) ||
//              $cart->totalAmount == 0
//      ) {
//      $customer->freeOfCashPayment = TRUE;

      if (
              ($cart->onlyPostal && strtolower($value->paymentMethod->internalName) == 'cod' ) ||
              (strtolower($value->paymentMethod->internalName) == 'invoice' && !$customer->freeOfCashPayment) ||
              (strtolower($value->paymentMethod->internalName) == 'cod' && $cart->totalAmount > 1200)
      ) {
//break;
//Payment method niet toegelaten
      } else {
//  if ( isset($form_state['values']['payment']['needinvoice']) && $form_state['values']['payment']['needinvoice'] == TRUE) {
        if (!$first) {
          $first = $value->id;
        }

        $subTotalWithoutPayment = $cart->subTotalAmountWithoutPayment;
        $cost = $value->CalculateCost($subTotalWithoutPayment);

        $options[$value->id] = ''; //t($value->paymentMethod->internalName);

        if (is_string($value->paymentMethod->descriptionTag)) {
          $description = $value->paymentMethod->descriptionTag;
        } else {
          $description = '';
        }


        $methods[$value->id] = array(
            'code' => $value->paymentMethod->internalName,
            'image' => Functions::GetImage('paymentmethods', $value->paymentMethod->internalName),
            'name' => $value->paymentMethod->tag,
            'cost' => $cost,
            'description' => $description,
        );
      }
//  }
    }

    $form['payment']['methods'] = array(
        '#value' => $methods,
    );


    $form['payment']['method'] = array(
        '#type' => 'radios',
        //'#required' => TRUE,
        '#options' => $options,
        '#default_value' => $default,
            //'#title' => t('Payment methods'),
    );

    if (array_key_exists($default, $options)) {
      $form['payment']['method']['#default_value'] = $default;
    } else {

      $form['payment']['method']['#default_value'] = $first;
    }
  }
  /*
    $form['payment']['subtotal'] = array('#value' => $cart ? $cart->subTotalAmount : 0);
    $form['payment']['vatamount'] = array('#value' => $cart ? $cart->vatAmount : 0);
    $form['payment']['total'] = array('#value' => $cart ? $cart->totalAmount : 0);
   */

  $form['payment']['priceblock'] = array('#markup' => theme('priceblock', array('subtotal' => $cart->subTotalAmount, 'vatAmount' => $cart->vatAmount, 'total' => $cart->totalAmount, 'attributes' => array('class' => array('last')))));

  $form['payment']['terms'] = array(
      '#type' => 'checkbox',
      '#title' => t('I agree with the terms and conditions'),
      '#title_display' => 'invisible',
      '#required' => TRUE,
      '#default_value' => isset($_SESSION['agree'][$cart->id]) ? $_SESSION['agree'][$cart->id] : FALSE,
  );


  $form['payment']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm'),
      '#attributes' => array('class' => array('action', 'button', 'large', 'continue', 'display-block')),
          //'#submit' => array('pccheckout_checkout_form_payment_submit'),
//'#limit_validation_errors' => array(array('personal', 'delivery', 'payment')),
  );


//</editor-fold>


  switch ($step) {
    case 'login':
      drupal_set_title(t('Thanks for your order'));
      $form['login']['fieldsetclass']['#value'] = '';
      $form['shipping']['fieldsetclass']['#value'] = 'disabled collapsed';
      $form['payment']['fieldsetclass']['#value'] = 'disabled collapsed';
      break;
    case 'personal':
      if ($customer) {
        if ($customer->firstName != '') {
          drupal_set_title(t('Dear @firstName, please complete your details', array('@firstName' => $customer->firstName)));
        } else {
          drupal_set_title(t('Please complete your details'));
        }
      }
      $form['personal']['fieldsetclass']['#value'] = '';
      $form['shipping']['fieldsetclass']['#value'] = 'disabled collapsed';
      $form['payment']['fieldsetclass']['#value'] = 'disabled collapsed';

      break;
    case 'shipping':
      if ($customer && $customer->firstName != '') {
        if ($cart && $cart->isPickup) {
          drupal_set_title(t('Dear @firstName, choose your pickup point', array('@firstName' => $customer->firstName)));
        } else {
          drupal_set_title(t('Dear @firstName, choose your delivery address', array('@firstName' => $customer->firstName)));
        }
      }
      $form['personal']['fieldsetclass']['#value'] = 'collapsible collapsed';
      $form['shipping']['fieldsetclass']['#value'] = '';
      $form['payment']['fieldsetclass']['#value'] = 'disabled collapsed';

      break;
    case 'payment':
      if ($customer) {
        if ($customer->firstName != '') {
          drupal_set_title(t('Dear @firstName, choose your payment method', array('@firstName' => $customer->firstName)));
        }
      }

      $form['personal']['fieldsetclass']['#value'] = 'collapsible collapsed';
      $form['shipping']['fieldsetclass']['#value'] = 'collapsible collapsed';
      $form['payment']['fieldsetclass']['#value'] = '';

      break;
    case 'redirect':
      $form['personal']['fieldsetclass']['#value'] = 'disabled collapsed';
      $form['shipping']['fieldsetclass']['#value'] = 'disabled collapsed';
      $form['payment']['fieldsetclass']['#value'] = 'disabled collapsed';
      break;
  }

  $form_state['storage']['cart'] = $cart;
  $form_state['storage']['customer'] = $customer;
  $form_state['storage']['addresses'] = $addresses;
  $form_state['storage']['deliveryCountries'] = $deliveryCountries;
  $form_state['storage']['step'] = $step;


  $form['#cache'] = TRUE;
  $form_state['cache'] = TRUE;
  $form['#tree'] = TRUE;
  return $form;
}

function pccheckout_checkout_form_validate(&$form, &$form_state) {
  try {
    $cart = $form_state['storage']['cart'];
    if (isset($form_state['input']['op']) && ($form_state['input']['op'] == 'ajax')) {

      if (isset($form_state['values']['payment']['method']) && $form_state['values']['payment']['method']) {
        $cart->payment_method = $form_state['values']['payment']['method'];
      } else {
        $cart->payment_method = 0;
      }

      if (isset($form_state['values']['payment']['credit']['use']) && $form_state['values']['payment']['credit']['use'] == 'yes') {
        $cart->storeCredit = $form_state['values']['payment']['credit']['amount'];

        if ($cart->storeCredit >= $cart->subTotalWithoutPayment) {
          $cart->payment_method = 0;
        }
      } else {
        $cart->storeCredit = 0;
      }
//$cart->Remove('billing_address');
      Carts\Factory::Save($cart);

//Carts\Factory::Refresh($cart);
// if ($form_state['triggering_element']['#name'] == 'payment[vatNumber][number]' || $form_state['triggering_element']['#name'] == 'payment[vatNumber][country]') {
//}

      $form_state['rebuild'] = TRUE;
    } else {
      $page = $form_state['build_info']['args'][0];

      switch ($page) {
        case 'payment':
          /* if (!isset($form_state['values']['payment']['method']) && $cart->totalAmount > 0) {
            form_set_error('payment][method', t('Please select a payment method'));
            } else {
           */

          if ($form_state['values']['payment']['needinvoice']) {
            $customer = Customers\Factory::Current();
            $addressId = $form_state['values']['payment']['address'];

            if ($addressId == 0) {
              $address = Addresses\Factory::Create();
              $address->phone = $customer->phone;
            } else {
              $address = Addresses\Factory::Get($addressId);
              $address->EnsureLoaded();
            }
            Forms::LoadObject($form_state['values']['payment'], $address);
            $address->customer = $customer->id;
            try {
              Addresses\Factory::Validate(clone $address);
            } catch (\printconnect\Dal\Exception $ex) {
              Forms::HandleException($ex, $form, 'payment][');
            }
            $form_state['storage']['payment']['address'] = $address;
          }
// }

        case 'shipping':/*
          $customer = Customers\Factory::Current();

          if ($cart && $cart->isPickup) {
          if (!isset($form_state['values']['shipping']['pickup']['id'])) {
          form_set_error('shipping][pickup][new', t('Please select a pickup point'));
          }
          } else {
          if (isset($form_state['values']['shipping']['delivery']['address'])) {
          $addressId = $form_state['values']['shipping']['delivery']['address'];

          if ($addressId == 0) {
          $address = Addresses\Factory::Create();
          $address->firstName = $customer->firstName;
          $address->lastName = $customer->lastName;
          $address->phone = $customer->phone;
          } else {
          $address = Addresses\Factory::Get($addressId);
          $address->EnsureLoaded();
          }

          Forms::LoadObject($form_state['values']['shipping']['delivery'], $address);
          $address->customer = $customer->id;
          try {
          Addresses\Factory::Validate(clone $address);
          } catch (\printconnect\Dal\Exception $ex) {
          Forms::HandleException($ex, $form, 'shipping][delivery][');
          }
          $form_state['storage']['shipping']['delivery']['address'] = $address;
          }
          } */
        case 'personal':
          break;
        case 'login':
//var_dump($form_state['triggering_element']);
          if ($form_state['triggering_element'] == 'register') {
            $customer = Customers\Factory::GetByEmail($form_state['values']['login']['email']);
            if ($customer) {
              form_set_error('login', t('This email address is already registered'));
            } else {
              $customer = Customers\Factory::Create();
              Forms::LoadObject($form_state['values']['login'], $customer);
              $customer->repeatpassword = $customer->password;
              Customers\Factory::Validate($customer);
              $form_state['storage']['customer'] = $customer;
              $form_state['storage']['new_customer'] = TRUE;
              return true;
            }
          }
          if ($form_state['triggering_element'] == 'submit') {
            $customer = Customers\Factory::Login($form_state['values']['login']['email'], $form_state['values']['login']['password']);
            if ($customer) {
              $form_state['storage']['customer'] = $customer;
              return true;
            } else {
              form_set_error('login', t('Cannot log in using the given email and password.'));
              return false;
            }
          }
      }
    }

    $form_state['storage']['cart'] = $cart;
  } catch (\printconnect\Dal\Exception $ex) {
    Forms::HandleException($ex, $form, '');
// form_set_error();
    return FALSE;
  }
}

function pccheckout_checkout_form_submit(&$form, &$form_state) {
  $cart = $form_state['storage']['cart'];
  $customer = Customers\Factory::Current();
  $cart->customer = $customer->id;

  if (isset($form_state['values']['payment']['credit']['use']) && $form_state['values']['payment']['credit']['use'] == 'yes') {
    //$cart->storeCredit = $form_state['values']['payment']['credit']['amount'];
    $customer = CustomersFactory::Current();
    CustomersFactory::LoadCustomer($customer);
    $account = Factory::Get($customer,$customer->billingAccount->id , FALSE);
    
    $cart->storeCredit = $account->credits;
    if ($cart->storeCredit >= $cart->totalAmount) {
      $cart->payment_method = 0;
    }
  } else {
    $cart->storeCredit = 0;
  }

  $id = $cart->id;


  if ($cart->totalAmount <= 0) {
    Carts\Factory::Save($cart);
    if (isset($form_state['values']['payment']['credit']['use']) && $form_state['values']['payment']['credit']['use']) {
      Carts\Factory::Process($cart, 'credit');
    } else {
      Carts\Factory::Process($cart, 'invoice');
    }

    //Carts\Factory::Delete();
    drupal_goto('myprintconnect/orders/' . $id . '/confirmation');
    exit;
  }

  if (isset($form_state['values']['payment']['method'])) {
    $paymentMethod = PaymentMethods\Factory::Get($form_state['values']['payment']['method']);
    $cart->payment_method = $form_state['values']['payment']['method'];
  } else {
    $cart->payment_method = 0;
  }
  Carts\Factory::Save($cart);


  switch (strtolower($paymentMethod->paymentMethod->internalName)) {
    case 'cod':
      Carts\Factory::Process($cart, 'cod');
//Carts\Factory::Delete();
      drupal_goto('myprintconnect/orders/' . $id . '/confirmation');

      break;
    case 'invoice' :
      Carts\Factory::Process($cart, 'invoice');
//Carts\Factory::Delete();
      drupal_goto('myprintconnect/orders/' . $id . '/confirmation');
      break;

    case 'transfer' :
      Carts\Factory::Process($cart, 'transfer');
//Carts\Factory::Delete();
      drupal_goto('myprintconnect/orders/' . $id . '/confirmation');
      break;
    
    case 'cheque' :
      Carts\Factory::Process($cart, 'cheque');
//Carts\Factory::Delete();
      drupal_goto('myprintconnect/orders/' . $id . '/confirmation');
      break;
    default:
      $paymentgateway = variable_get('pc_paymentgateway', 'pcogone');
      if (function_exists(($paymentgateway . '_processpayment'))) {

        $paymentgateway = variable_get('pc_paymentgateway', 'pcogone');
        $url = call_user_func($paymentgateway . '_processpayment', $cart->payment_method, $customer->name, $cart->id, $cart->totalAmount, array(
            'accept' => 'myprintconnect/orders/' . $cart->id . '/confirmation',
            'cancel' => 'checkout/payment',
                ));

        $_SESSION['agree'][$cart->id] = TRUE;
        drupal_goto($url);
      } else {
        throw new Exception(t('Not implemented.'));
        form_set_error('method', t('Not implemented.'));
      }
  }
}

function pccheckout_checkout_form_login_validate($form, &$form_state) {
  try {
    $customer = Customers\Factory::Login($form_state['values']['login']['email'], $form_state['values']['login']['password']);
    if ($customer) {
      $form_state['storage']['customer'] = $customer;
      return true;
    } else {
      form_set_error('login', t('Cannot log in using the given email and password.'));
      return false;
    }
  } catch (\printconnect\Dal\Exception $ex) {
    Forms::HandleException($ex, $form['login'], 'login][');
    return FALSE;
  }
}

function pccheckout_checkout_form_register_validate($form, &$form_state) {
  try {
    global $language;
    $customer = Customers\Factory::GetByEmail($form_state['values']['login']['email']);
    if ($customer) {
      $customer = Customers\Factory::Login($form_state['values']['login']['email'], $form_state['values']['login']['password']);
      if ($customer) {
        $form_state['storage']['customer'] = $customer;
        return true;
      } else {
        form_set_error('login', t('Cannot log in using the given email and password.'));
        return false;
      }
//	form_set_error('login', t('This email address is already registered'));
    } else {
      $customer = Customers\Factory::Create();
      Forms::LoadObject($form_state['values']['login'], $customer);
      $customer->repeatpassword = $customer->password;
      $customer->language = $language->id;
      Customers\Factory::Validate($customer);
      $form_state['storage']['customer'] = $customer;
      $form_state['storage']['new_customer'] = TRUE;
      return true;
    }
  } catch (\printconnect\Dal\Exception $ex) {
    Forms::HandleException($ex, $form['login'], 'login][');
// form_set_error();
    return FALSE;
  }
}

function pccheckout_checkout_form_login_submit($form, &$form_state) {
  $customer = $form_state['storage']['customer'];

  Customers\Factory::Save($customer);

  Customers\Factory::LoginByObject($customer);

  drupal_goto('checkout/personal');
  exit;
}

function pccheckout_checkout_form_register_submit($form, &$form_state) {
  $customer = $form_state['storage']['customer'];

  Customers\Factory::Save($customer);

  Customers\Factory::LoginByObject($customer);

  drupal_goto('checkout/personal');
  exit;
}

function pccheckout_checkout_form_personal_submit($form, &$form_state) {
  global $language;
  $customer = Customers\Factory::Current();
  $customer->firstName = $form_state['values']['personal']['firstName'];
  $customer->lastName = $form_state['values']['personal']['lastName'];
  $customer->phone = $form_state['values']['personal']['phone'];
  if (isset($language->id)) {
    $customer->language = $language->id;
  } else {
    $customer->language = 1;
  }
  Customers\Factory::Save($customer);

  drupal_goto('checkout/shipping');
  exit;
}

function pccheckout_checkout_form_shipping_validate(&$form, &$form_state) {
  $customer = Customers\Factory::Current();
  $cart = $form_state['storage']['cart'];

  if ($form_state['values']['invoice']['needinvoice']) {

    $addressId = $form_state['values']['invoice']['address']['address'];

    if ($addressId == 0) {
      $address = Addresses\Factory::Create();
      $address->phone = $customer->phone;
    } else {
      $address = Addresses\Factory::Get($addressId);
      $address->EnsureLoaded();
    }
    Forms::LoadObject($form_state['values']['invoice']['address'], $address);
    $address->customer = $customer->id;
    try {
      Addresses\Factory::Validate(clone $address);
    } catch (\printconnect\Dal\Exception $ex) {
      Forms::HandleException($ex, $form, 'invoice][address][');
    }
    $form_state['storage']['invoice']['address'] = $address;
  }
  if ($cart && $cart->isPickup) {
    if (!isset($form_state['values']['shipping']['pickup']['id']) || $form_state['values']['shipping']['pickup']['id'] == '') {
      form_set_error('shipping][pickup][new', t('Please select a pickup point'));
    }
  } else {
    if (isset($form_state['values']['shipping']['delivery']['address'])) {
      $addressId = $form_state['values']['shipping']['delivery']['address'];

      $countryId = $form_state['values']['shipping']['delivery']['country'];

      if ($countryId != 21) {
        $country = \printconnect\Countries\Factory::Get($countryId);
        $city = urlencode($form_state['values']['shipping']['delivery']['city']);
        $postal = urlencode($form_state['values']['shipping']['delivery']['postalCode']);
        $url = 'http://maps.googleapis.com/maps/api/distancematrix/json?origins=Belgium&destinations=' . $postal . ',' . $country->name . '&language=nl-BE&sensor=false';
// form_set_error('shipping][delivery][country', $url);
        $data = drupal_http_request($url);
        $result = json_decode($data->data);

        if ($result->rows[0]->elements[0]->status == 'ZERO_RESULTS' || $result->rows[0]->elements[0]->status == 'NOT_FOUND' || $result->rows[0]->elements[0]->distance->value > 2500000) {
          form_set_error('shipping][delivery][postalCode', t('There appears to be something wrong with your shipping address'));
        }
      }

      if ($addressId == 0) {
        $address = Addresses\Factory::Create();
        $address->firstName = $customer->firstName;
        $address->lastName = $customer->lastName;
        $address->phone = $customer->phone;
      } else {
        $address = Addresses\Factory::Get($addressId);
        $address->EnsureLoaded();
      }

      Forms::LoadObject($form_state['values']['shipping']['delivery'], $address);
      $address->customer = $customer->id;
      try {
        Addresses\Factory::Validate(clone $address);
      } catch (\printconnect\Dal\Exception $ex) {
        Forms::HandleException($ex, $form, 'shipping][delivery][');
      }
      $form_state['storage']['shipping']['delivery']['address'] = $address;
    }
  }

  if (isset($form['shipping']['giftvouchers'])) {

    $customer = $form_state['storage']['customer'];

    $addressId = $form_state['values']['shipping']['giftvouchers']['address']['address'];

    if ($addressId == 0) {
      $address = Addresses\Factory::Create();
      $address->firstName = $customer->firstName;
      $address->lastName = $customer->lastName;
      $address->phone = $customer->phone;
    } else {
      $address = Addresses\Factory::Get($addressId);
      $address->EnsureLoaded();
    }

    Forms::LoadObject($form_state['values']['shipping']['giftvouchers'], $address);
    $address->customer = $customer->id;
    try {
      Addresses\Factory::Validate(clone $address);
    } catch (\printconnect\Dal\Exception $ex) {
      Forms::HandleException($ex, $form, 'shipping][giftvouchers][');
    }
    $form_state['storage']['shipping']['giftvouchers']['address'] = $address;

//    drupal_set_message('validate vouchers');
  }
}

function pccheckout_checkout_form_shipping_submit(&$form, &$form_state) {
  $customer = Customers\Factory::Current();
  $cart = $form_state['storage']['cart'];


  if (isset($form_state['storage']['shipping']['delivery']['address'])) {
    $address = $form_state['storage']['shipping']['delivery']['address'];
    Addresses\Factory::Save($address);

    $cart->shipping_address = $address->id;
    $cart->Remove('pickuppoint');

    $cart->neutralShipping = $form_state['values']['shipping']['delivery']['neutral'];
  }

  if (isset($form_state['storage']['invoice']['address'])) {
    $address = $form_state['storage']['invoice']['address'];
    Addresses\Factory::Save($address);

    $cart->country = $form_state['values']['invoice']['address']['country'];
    $cart->vatNumber = $form_state['values']['invoice']['address']['vatNumber'];
    $cart->customer_reference = $form_state['values']['invoice']['address']['reference'];
    $cart->billing_address = $address->id;
  } else {
    $cart->Remove('billing_address');
    $cart->Remove('country');
    $cart->Remove('vatNumber');
  }
  if (isset($form_state['values']['shipping']['pickup']['id'])) {
    switch ($form_state['storage']['shippingType']) {
      case 'shippingTypeBpostPickupPoint':
//if ($form_state['values']['shipping']['pickup']['id'] > 100000) {
        $poi = \printconnect\bPost\Factory::Get($form_state['values']['shipping']['pickup']['id']);
        $poi->EnsureLoaded();
        $cart->pickuppoint = $poi->cartObject;
        break;
      case 'shippingTypeMondialRelay':
//} else {
        $pickuppoint = \printconnect\PickupPoints\Factory::Get($form_state['values']['shipping']['pickup']['id'], $form_state['values']['shipping']['pickup']['country']);
        $pickuppoint->EnsureLoaded();
        $cart->pickuppoint = $pickuppoint;
//}
        break;
    }

    $cart->pickuppoint->contactName = $form_state['values']['shipping']['pickup']['contact'];
    $cart->pickuppoint->email = $form_state['values']['shipping']['pickup']['email'];
    $cart->pickuppoint->phone = $form_state['values']['shipping']['pickup']['sms'];

    $cart->neutralShipping = $form_state['values']['shipping']['pickup']['neutral'];
  }

  foreach ($cart->giftVouchers as $giftVoucher) {
    if (isset($form_state['storage']['shipping']['giftvouchers']['address'])) {
      $address = $form_state['storage']['shipping']['giftvouchers']['address'];
      Addresses\Factory::Save($address);
      $addressId = $address->id;
    } else {
      $addressId = $cart->shipping_address;
    }

    $giftVoucher->address = $addressId;

    \printconnect\GiftVouchers\Factory::Save(new \printconnect\GiftVouchers\GiftVoucher($giftVoucher));
  }



  Addresses\Factory::ClearAddressesCache($customer);

  Carts\Factory::Save($cart);

  drupal_goto('checkout/payment');

  exit;
}

function pccheckout_checkout_form_pickup_validate(&$form, &$form_state) {
  if (!isset($form_state['values']['shipping']['pickup']['id']) || !$form_state['values']['shipping']['pickup']['id']) {
    form_set_error('shipping][pickup][open', t('Please select a pickup point'));
  }
}

function pccheckout_payment_form_build_methods(&$form, $form_state, $element = array('payment', 'method')) {
  $cart = $form_state['storage']['cart'];
  $customer = $form_state['storage']['customer'];
  $paymentMethods = $form_state['storage']['paymentmethods'];

  $options = array();
  $methods = array();

  $default = $cart->payment_method;

  $first = FALSE;

  foreach ($paymentMethods as $value) {
    if (
            ($cart->onlyPostal && strtolower($value->paymentMethod->internalName) == 'cod' ) ||
            (strtolower($value->paymentMethod->internalName) == 'invoice' && (!$customer->freeOfCashPayment || !($cart->hasProperty('billingAccount')))) ||
            (strtolower($value->paymentMethod->internalName) == 'cod' && $cart->totalAmount > 1200)
    ) {
//break;
//Payment method niet toegelaten
    } else {
//  if ( isset($form_state['values']['payment']['needinvoice']) && $form_state['values']['payment']['needinvoice'] == TRUE) {
      if (!$first) {
        $first = $value->id;
      }

      $subTotalWithoutPayment = $cart->subTotalAmountWithoutPayment;
      $cost = $value->CalculateCost($subTotalWithoutPayment);

      $options[$value->id] = ''; //t($value->paymentMethod->internalName);

      if (is_string($value->paymentMethod->descriptionTag)) {
        $description = $value->paymentMethod->descriptionTag;
      } else {
        $description = '';
      }

      $methods[$value->id] = array(
          'image' => theme('image', array('path' => printconnect_getimage('paymentmethods', $value->paymentMethod->internalName))),
          'name' => $value->paymentMethod->tag,
          'filler' => array('data' => '', 'class' => array('filler')),
          'cost' => theme('price', array('value' => $cost, 'block' => TRUE, 'free' => TRUE)),
          'description' => $value->paymentMethod->descriptionTag,
      );
    }
  }

  $form['payment']['method']['table']['#options'] = $methods;
  $form['payment']['method']['table']['#attributes'] = array('class' => array('grid', 'clearfix', 'rows-' . count($methods), 'payment-methods-table'));

  if (array_key_exists($default, $options)) {
    $form['payment']['method']['table']['#default_value'] = $default;
  } else {
    $form['payment']['method']['table']['#default_value'] = FALSE;
  }
if ($cart->subTotalAmount <= 0) {
    hide($form['payment']['method']);
    hide($form['payment']['header']);
    $form['payment']['header']['#required'] = FALSE;
  } else {
    show($form['payment']['method']);
    show($form['payment']['header']);
    $form['payment']['header']['#required'] = TRUE;
  }
}

function _pccheckout_vatnumber($value) {
  if (strlen($value) >= 2) {
    $country = substr($value, 0, 2);
    return substr($value, 2);
  } else {
    $country = '';
    return $value;
  }
}
