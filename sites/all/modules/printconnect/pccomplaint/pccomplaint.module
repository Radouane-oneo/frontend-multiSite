<?php
use \printconnect\Dal;
use printconnect\Orders\Factory;
function pccomplaint_menu() {
  $items = array();
  $items['complaint'] = array( 
    'title' => 'complaint page', //page title
    'description' => '',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('pccomplaint_form'), //put the name of the form here
    'access callback' => TRUE
  );
  $items['complaintupload'] = array( 
    'title' => 'complaint page', //page title
    'description' => '',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('pccomplaint_form_upload'), //put the name of the form here
    'access callback' => TRUE
  );
  $items['complaintdeleteimage'] = array( 
    'title' => 'complaint page', //page title
    'description' => '',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('pccomplaint_form_deleteimage'), //put the name of the form here
    'access callback' => TRUE
  );
  $items['complaint/order/%'] = array(
      'title' => '',
      'page callback' => '_pccomplaint_order_callback',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
//  $items['retour'] = array( 
//    'title' => 'retour page', //page title
//    'description' => '',
//    'page callback' => 'drupal_get_form', 
//    'page arguments' => array('pcretour_form'), //put the name of the form here
//    'access callback' => TRUE
//  );
  return $items;
}
function pccomplaint_form($form, &$form_state) {
    $form['complaint'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('complaint')),
    );
    $form['complaint']['description'] = array(
      //  '#markup' => '<div class="descComplait">' .t('desccomplaint').'</div>'
    );
    $form['complaint']['form'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('complaintform')),
    );
    
    //bloc order
    $form['complaint']['form']['order'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('bloccomplaint')),
    );
    $form['complaint']['form']['order']['titleorder'] = array(
        '#markup' => t('title order complaint'),
        '#prefix' => '<h3>',
        '#suffix' => '</h3>', 
    );
    $form['complaint']['form']['order']['labelorder'] = array(
        '#markup' => t('labelorder')."<span> *</span>",
        '#prefix' => '<div class="identification"><div class="labelorder">',
        '#suffix' => '</div>', 
    );
    $form['complaint']['form']['order']['orderid'] = array(
        '#type' => 'textfield',
        '#attributes' => array('class' => array('required'), 'placeholder' => t('orderid')),
    );
    $form['complaint']['form']['order']['jobid'] = array(
        '#markup' =>'<select id="edit-jobid" name="jobid"></select>',
//        '#attributes' => array('placeholder' => t('jobnumber')),
    );
//    $form['complaint']['form']['order']['jobid'] = array(
//        '#type' => 'textfield',
//        '#attribute' => array('placeholder' => t('jobnumber')),
//    );

    $form['complaint']['form']['order']['errorMsg'] = array(
        '#markup' => "<span id='errorMsg'></span>",
    );

    $form['complaint']['form']['order']['txtJobId'] = array(
        '#markup' => "<span class='txtJobId'>".t('txtJobId')."</span>",
        '#suffix' => '</div>',
    );
    
    //bloc about
    $form['complaint']['form']['about'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('bloccomplaint')),
    );
    $form['complaint']['form']['about']['titleorder'] = array(
        '#markup' => t('title about the issue'),
        '#prefix' => '<h3>',
        '#suffix' => '</h3>', 
    );
    $form['complaint']['form']['about']['labelorder'] = array(
        '#markup' => t('your complaint')."<span> *</span>",
        '#prefix' => '<div class="orderIssue"><div class="labelorder">',
        '#suffix' => '</div>', 
    );
    $options = array (
       //'0' => t('complaint type'),
       "0"=>t('not delivered'),
       "1"=>t('quality'),
       "2"=>t('damaged'),
       "3"=>t('other'),
    );
    $form['complaint']['form']['about']['complainttype'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#attributes' => array('class' => array('complainttype', 'required')),
    );
    $form['complaint']['form']['about']['descriptionabout'] = array(
        '#type' => 'textarea',
        '#rows' => 8,
        '#attributes' => array('class' => array('descriptionabout'), 'placeholder' => t('Description about')), 
    );
    $form['complaint']['form']['about']['errorMsg'] = array(
        '#markup' => "<span id='errorMsg'>".t('errorMsg')."</span>",
        '#suffix' => '</div>', 
    );
    $form['complaint']['form']['about']['dropdrag'] = array( 
        '#type' => 'container',
        '#attributes' => array('class' => array('blocdropdrag')),
    );
     $form['complaint']['form']['about']['dropdrag']['picture'] = array(
        '#markup' => "<span class='dropTitle'>".t('pictures')."</span>"."<br><p>".t('required text')."</p>",
        '#prefix' => '<div class="blocpicture">',
        '#suffix' => '</div>', 
    
        );
    $form['complaint']['form']['about']['dropdrag']['upload'] = array(
        '#markup' => '<div id="dZUpload" class="dropzone">
                            <div class="dz-default dz-message">'.t('drag and drop to upload or browse files').'</div>
                      </div>',
        '#prefix' => '<div class="dropzoneupload">',
        '#suffix' => '</div>', 
    
        );
    $form['complaint']['form']['about']['dropdrag']['message'] = array(
        '#markup' => '<div id="errorUpload"></div>'
    );
    //bloc what would you like us to do
    $form['complaint']['form']['like'] = array(
        '#type' => 'container',
        '#attributes' => array('class' => array('bloccomplaint')),
    );
    $form['complaint']['form']['like']['titleorder'] = array(
        '#markup' => t('what would you like us to do'),
        '#prefix' => '<h3>',
        '#suffix' => '</h3>', 
    );
    $form['complaint']['form']['like']['labelorder'] = array(
        '#markup' => t('compensation label')."<span> *</span>",
        '#prefix' => '<div class="compensation"><div class="labelorder">',
        '#suffix' => '</div>', 
    );
    $options = array (
       "0"=>t('reprint'),
       "1"=>t('compensation')
    );
    $form['complaint']['form']['like']['compensation'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#attributes' => array('class' => array('compensation'), 'placeholder' => t('compensation')),
    );
    $form['complaint']['form']['like']['descriptionlike'] = array(
        '#type' => 'textarea',
        '#rows' => 8,
        '#attributes' => array('class' => array('descriptionlike'), 'placeholder' => t('Comments complaint')),
        '#suffix' => '</div>', 
 
    );
    //var_dump($_SESSION['messages']);die();
    if (isset($_SESSION['messages'])){
        $form['complaint']['form']['message'] = array(
            '#markup' => "<div class='complaintSuccess'><p>".t('complaintSuccess text')."</p><p class='questions'>".t('questionsTxt')."</div>",

        );
        unset($_SESSION['messages']);
    }else{
        $form['complaint']['form']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('submit form complaint'),
            '#prefix' => '<div class="complaintSubmit">',
            '#suffix' => '</div>',       
          );
    }  
    
  return $form;
}

function pccomplaint_form_validate($form, &$form_state) {
}
function pccomplaint_form_submit($form, &$form_state) {
   pccomplaint_notify($form_state, 'flyermailer@gmail.com');
   //pccomplaint_notify($form_state, 'info@flyer.be');
}
function pccomplaint_notify($form_state, $mailto) {
	$params = array();    
    $order = \printconnect\Orders\Factory::Get($form_state["values"]["orderid"], false);
    $customer = \printconnect\Customers\Factory::Get($order->customer);
   	
    $params['firstName'] = $customer->firstName;
    $params['email'] = $customer->email;
    $params['phone'] = $customer->phone;
    $orderId = $form_state['values']['orderid'];
    $url = "http://admin.printconcept.com/order/index/order/".$orderId;
    $params['url'] = $url;
    $params['orderId'] = $orderId;
    $params['jobid'] = $_POST['jobid'];
 //   echo $params['jobid']; die;
    $complainttypes = array (
      // '0' => t('complaint type'),
       "0"=>t('not delivered'),
       "1"=>t('quality'),
       "2"=>t('damaged'),
       "3"=>t('other'),
    );    
    $params['complainttype'] = $complainttypes[$form_state['values']['complainttype']];
    $params['descriptionabout'] = $form_state['values']['descriptionabout'];
     $compensations = array (
       "0"=>t('reprint'),
       "1"=>t('compensation')
    );
    $params['compensation'] = $compensations[$form_state['values']['compensation']];
    $params['descriptionlike'] = $form_state['values']['descriptionlike'];
    //var_dump($params);die;
    $params['from'] = $from;
    //drupal_mail('pccomplaint', 'notice', $from, NULL, $params);
    $subject = t('ComplaintSubject').' '.$params['orderId'].' '.$params['complainttype'];
    $message = '<br/><b>' . t('Complaint mail') . '</b>: ';
    $message .= $params['firstName'];
    $message .= '<br/><b>' . t('Phone') . '</b>: ';
    $message .= $params['phone'];
    if (isset($params['email'])) {
      $message .= '<br/><b>' . t('Email') . '</b>: ';
      $message .= $params['email'];
    }
    $message .= '<br/><b>' . t('url') . '</b>: ';
    $message .= $params['url'];
    $message .= '<br/><b>' . t('jobid') . '</b>: <br/>';
    $message .= $params['jobid'];
    $message .= '<br/><b>' . t('complainttype') . '</b>: <br/>';
    $message .= $params['complainttype'];
    $message .= '<br/><b>' . t('descriptionabout') . '</b>: <br/>';
    $message .= nl2br(htmlentities($params['descriptionabout']));
    $message .= '<br/><b>' . t('compensation') . '</b>: <br/>';
    $message .= $params['compensation'];
    $message .= '<br/><b>' . t('descriptionlike') . '</b>: <br/>';
    $message .= nl2br(htmlentities($params['descriptionlike']));
    $dir = "uploads";
    $dir_separator = DIRECTORY_SEPARATOR;
    $path = dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"];
    $filenames = array();
    foreach (scandir(dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"]) as $item) {
       if ($item == '.' || $item == '..') continue;
       $filenames[] = basename(dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"].$dir_separator.$item);
    }    
    mail_attachment($filenames, $path, $mailto, $mailto, $params['firstName'], $replyto, $subject, $message, $orderId);
   // drupal_set_message('This form has been emailed to '. $from);    
}
function mail_attachment($filenames, $path, $mailto, $from_mail, $from_name, $replyto, $subject, $message, $orderId) {
     
	$my_module = 'pccomplaint';
    $my_mail_token = microtime();
    $system = drupal_mail_system($my_module, $my_mail_token);
    $from = variable_get('system_mail', 'support@flyer.fr');
    // info mail admin
    $to = variable_get('system_mail', 'contact@agenceoneo.com');
    
	$dir = "uploads";
    $dir_separator = DIRECTORY_SEPARATOR;
	$files = array();
    foreach ($filenames as $filename) {         
        $filepath  = dirname(__FILE__).$dir_separator.$dir.$dir_separator.$orderId.$dir_separator.$filename;
		$fileinfos = pathinfo ($filepath);
		
		$files[] = array(
	        'filepath'    => $filepath,
	        'filename'    => $fileinfos['basename'],
	        'filemime'    => mime_content_type($filepath),
	        'disposition' => 'attachement',
	        'list'        => TRUE
	      );
		        
    }
	
	$msg = array(
	  'id' => $module . '_' . $token,
	  'to' => 'mohammed.b@oneoweb.com',
	  'subject' => $subject,
	  'body' => array($message),
	  'headers' => array(
	    'From' => $from,
	    'Sender' => $from,
	    'Return-Path' => $from,
	    'MIME-Version' => '1.0',
	    'Content-Type' => 'text/html; charset=UTF-8',
	  ),
	  'params' => array(
	    'attachments' => $files
	  ),
	);
	
	// print_r($msg);die;
	
    $message = $system->format($msg);
	$myemail = $system->mail($message);
	
	if($myemail) {
		foreach (scandir(dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"].$dir_separator) as $item) {
            if ($item == '.' || $item == '..') continue;
            unlink(dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"].$dir_separator.$item);
        }
        $pathfolder = dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"];
   
        shell_exec("rm -rf $pathfolder");
        echo 'Message has been sent';
        $_SESSION['messages'] = 'yes'; 
	} else {
		echo 'Message could not be sent.';
	}
	
	/* 
    $mail = new PHPMailer;
    $mail->SMTPDebug = 3;                               // Enable verbose debug output

    $mail->isSMTP();                                      // Set mailer to use SMTP
    $mail->Host = 'smtp.gmail.com';  // Specify main and backup SMTP servers
    $mail->SMTPAuth = true;                               // Enable SMTP authentication
    $mail->Username = 'flyermailer@gmail.com';                 // SMTP username
    $mail->Password = 'flyer567%';                           // SMTP password
    $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
  //  $mail->Port = 465; 
    $mail->Port = 587;  // TCP port to connect to
    $mail->setFrom($mailto, t('complaint flyer'));
    $mail->addAddress('mohammed.b@oneoweb.com', 'Joe User');     // Add a recipient
    //$mail->addReplyTo('info@example.com', 'Information');
    //$mail->addCC('cc@example.com');
    //$mail->addBCC('bcc@example.com');
    $dir = "uploads";
    $dir_separator = DIRECTORY_SEPARATOR;
    foreach ($filenames as $filename) {         
        $data = dirname(__FILE__).$dir_separator.$dir.$dir_separator.$orderId.$dir_separator.$filename;        
        $mail->addAttachment($data);
    }
    //$mail->addAttachment('/home/loubna/projects/flyerfr/public/sites/all/modules/printconnect/pccomplaint/uploads/2.jpg');
    //$mail->addAttachment('/home/loubna/projects/flyerfr/public/sites/all/modules/printconnect/pccomplaint/uploads/1.jpg');         // Add attachments
    //$mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name
    $mail->isHTML(true);                                  // Set email format to HTML

    $mail->Subject = $subject;
    $mail->Body    = $message;
    //$mail->AltBody = 'This is the body in plain text for non-HTML mail clients';

    if(!$mail->send()) {
        echo 'Message could not be sent.';
        echo 'Mailer Error: ' . $mail->ErrorInfo;die;
        } else {
            foreach (scandir(dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"].$dir_separator) as $item) {
                if ($item == '.' || $item == '..') continue;
                unlink(dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"].$dir_separator.$item);
            }
            $pathfolder = dirname(__FILE__).$dir_separator.$dir.$dir_separator.$form_state["values"]["orderid"];
       
            shell_exec("rm -rf $pathfolder");
            echo 'Message has been sent';
            $_SESSION['messages'] = 'yes';            
        }      
	 
	*/  
}

function pc_resize_image($file, $w, $h, $crop=FALSE) {
    list($width, $height) = getimagesize($file);
    $r = $width / $height;
    if ($crop) {
        if ($width > $height) {
            $width = ceil($width-($width*abs($r-$w/$h)));
        } else {
            $height = ceil($height-($height*abs($r-$w/$h)));
        }
        $newwidth = $w;
        $newheight = $h;
    } else {
        if ($w/$h > $r) {
            $newwidth = $h*$r;
            $newheight = $h;
        } else {
            $newheight = $w/$r;
            $newwidth = $w;
        }
    }
    $src = imagecreatefromjpeg($file);
    $dst = imagecreatetruecolor($newwidth, $newheight);
    imagecopyresampled($dst, $src, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);
    
    return $dst;
}

function pccomplaint_form_upload($form, &$form_state) {
  if (!empty($_FILES)){
        if(($_FILES['file']['type'] == 'image/jpeg') || ($_FILES['file']['type'] == 'image/jpg')){
            $tmp = $_FILES['file']['tmp_name'];            
            $img = pc_resize_image($tmp, 1080, 1080);            
            $dir_separator = DIRECTORY_SEPARATOR;
            $folder = "uploads";
            if (!file_exists(dirname(__FILE__).$dir_separator.$folder.$dir_separator.$_POST["orderID"])) {
                mkdir(dirname(__FILE__).$dir_separator.$folder.$dir_separator.$_POST["orderID"].$dir_separator, 0777, true);
//                $pathfolder = dirname(__FILE__).$dir_separator.$dir.$dir_separator.$_POST["idorder"].$dir_separator;
//                shell_exec("rm -rf $pathfolder");
            }            
            echo $destination_path = dirname(__FILE__).$dir_separator.$folder.$dir_separator.$_POST["orderID"].$dir_separator; 
            $target_path = $destination_path.$_FILES['file']['name'];
            imagejpeg($img, $target_path, 100);            
            echo 'true';
         }
         else
         {
             echo 'false';
         }
    }
    die;
 }
 function pccomplaint_form_deleteimage() {    
    $dir_separator = DIRECTORY_SEPARATOR;
    $dir = "uploads";
    //unlink(dirname(__FILE__).$dir_separator.$dir.$dir_separator.$_POST["idorder"].$dir_separator.$_POST["file"]);
    $pathimage = dirname(__FILE__).$dir_separator.$dir.$dir_separator.$_POST["idorder"].$dir_separator.$_POST["file"];
    shell_exec("rm -rf $pathimage");
    die;
 }
// function _pccomplaint_order_callback($order){ 
//     $orderObject = \printconnect\Orders\Factory::Get($order, false);
//     
//     if ($orderObject->number != '' && in_array($orderObject->orderStatus->id, array(10, 18, 15))){
//         echo 'true';
//     }
//     else{
//         echo 'false';
//     }
// die;
//}
function _pccomplaint_order_callback($order){
    $response = Factory::GetOrderJson($order);
    if($response) {
        Dal::BuildJson($response->data);
    }else {
        Dal::BuildJson(array(), 500);
    }    
}

function resize_image($file, $w, $h, $crop=FALSE) {
    list($width, $height) = getimagesize($file);
    $r = $width / $height;
    if ($crop) {
        if ($width > $height) {
            $width = ceil($width-($width*abs($r-$w/$h)));
        } else {
            $height = ceil($height-($height*abs($r-$w/$h)));
        }
        $newwidth = $w;
        $newheight = $h;
    } else {
        if ($w/$h > $r) {
            $newwidth = $h*$r;
            $newheight = $h;
        } else {
            $newheight = $w/$r;
            $newwidth = $w;
        }
    }
    $src = imagecreatefromjpeg($file);
   
    $dst = imagecreatetruecolor($newwidth, $newheight);
    imagecopyresampled($dst, $src, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);
    return $dst;
}