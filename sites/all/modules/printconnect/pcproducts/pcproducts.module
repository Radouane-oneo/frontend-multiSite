<?php

use printconnect\Customers\Factory as CustomersFactory;
use printconnect\Products\Factory;
use printconnect\Products\Product;
use printconnect\Products\Products;
use printconnect\Products\Configurations;
use printconnect\Products\Toolbox;
use printconnect\Products\Pricing;
use printconnect\Products\Options;
use printconnect\Products\RelatedProducts;
use printconnect\Products\Templates;
use printconnect\Drupal\Functions;
use printconnect\Shipping;


function pcproducts_theme() {
  return array(
      'productlink' => array(
          'variables' => array(
              'id' => FALSE,
              'title' => FALSE,
              'content' => FALSE,
              'attributes' => array(),
          )
      ),
      'productprice' => array(
          'variables' => array(
              'id' => FALSE,
              'attributes' => array(),
          )
      ),
      'productname' => array(
          'variables' => array(
              'id' => FALSE,
              'attributes' => array(),
          )
      ),
  );
}

function theme_productlink($vars) {
  $productId = $vars['id'];
  $title = $vars['title'];
  $content = $vars['content'];
  $attributes = $vars['attributes'];

  if ($productId) {
    $product = Factory::Get($productId);
    if (!$title) {
      $title = $product->name;
    }
    if (!$content) {
      $content = $product->name;
    }
    $attributes['alt'] = $title;
    $attributes['title'] = $title;
    return l($content, 'products/' . $productId, array('attributes' => $attributes, 'html' => true));
  }
}

function theme_productname($vars) {
  $productId = $vars['id'];
  if ($productId) {
    $product = Factory::Get($productId);
    return $product->name;
  }
}

function productname($productId, $items = array()) {
  return theme('productname', array('id' => $productId));
}

function _pcproducts_url($value, $separator = '-') {
  return \printconnect\Drupal\Functions::CreateUrl($value, $separator);
}

function pcproducts_menu() {
 //  var_dump(arg); //die;
  if (function_exists('printconnect_ensureinitialized')) {
    printconnect_ensureinitialized();
    //$products = Factory::GetAll();
    $flow = variable_get('pc_flow', 'whitelabel');

    $items['products'] = array(
        'title' => 'Products',
        'description' => t('Product catalog'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('pcproducts_products_form'),
        'access arguments' => array('access content'),
        'file' => 'pcproducts.forms.inc',
        'menu_name' => 'main-menu',
        'options' => array('attributes' => array('class' => array('products'))),
    );

        //foreach ($products as $product) {
          $items["getshippingdate"] = array(
              'title' => 'Configuration',
              'title callback' => '_pcproducts_getproductname',
              'title arguments' => array(1),
              'description' => t('Product'),
              'page callback' => 'callback_shippingdate_ajax',
              //'page arguments' => array(1),
              'access arguments' => array('access content')
          );

          $items["products/getjson/%"] = array(
              'title' => 'Configuration',
              'title callback' => '_pcproducts_getproductname',
              'title arguments' => array(1),
              'description' => t('Product'),
              'page callback' => 'callback_getjson_ajax',
              'page arguments' => array(1,2),
              'access arguments' => array('access content')
          );

          $items["products/%"] = array(
              'title' => 'Configuration',
              'title callback' => '_pcproducts_getproductname',
              'title arguments' => array(1),
              'description' => t('Product'),
              'page callback' => 'pcproducts_js_form',
              'page arguments' => array(1),
              'access arguments' => array('access content')
          );

//	  $items["products/promos"] = array(
//              'title' => 'promos prices',
//              'title arguments' => array(1),
//              'description' => t('promos prices'),
//              'page callback' => 'pcproducts_js_form_productWithPromo',
//              'page arguments' => array(1),
//              'access arguments' => array('content')
//          );
          $items["products/%/%"] = array(
              'title' => 'Configuration',
              'title callback' => '_pcproducts_getproductname',
              'title arguments' => array(1),
              'description' => t('Product'),
              'page callback' => 'pcproducts_js_form',
              'page arguments' => array(1, 2),
              'access arguments' => array('access content')
          );
          $items["products/%/%/%"] = array(
              'title' => 'Configuration',
              'title callback' => '_pcproducts_getproductname',
              'title arguments' => array(1),
              'description' => t('Product'),
              'page callback' => 'pcproducts_js_form',
              'page arguments' => array(1, 2, 3),
              'access arguments' => array('access content')
          );

          $items["products/%/%/%/%"] = array(
              'title' => 'Configuration',
              'title callback' => '_pcproducts_getproductname',
              'title arguments' => array(1),
              'description' => t('Product'),
              'page callback' => 'pcproducts_js_form',
              'page arguments' => array(1, 2, 3, 4),
              'access arguments' => array('access content')
          );
          $items["products/%/%/%/%/"] = array(
              'title' => 'Configuration',
              'title callback' => '_pcproducts_getproductname',
              'title arguments' => array(1),
              'description' => t('Product'),
              'page callback' => 'pcproducts_js_form',
              'page arguments' => array(1, 2, 3, 4, 5),
              'access arguments' => array('access content')
          );
        //}


     $items["js/products"] = array(
        'page callback' => 'pcproducts_js_callback',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
  }
}

function _pcproducts_alpha_array($all = false) {
  global $user;
  $i = 0;
  $products = _pcproducts_activeProducts($all);
  usort($products, function (Product $a, Product $b) {
            return strcmp($a->name, $b->name);
          });
  foreach ($products as $product) {
    $productName = trim(strtoupper($product->name));
    if (strlen($productName) == 0 || !ctype_alnum($productName[0])) {
      $letter = '#';
    } else {
      $letter = $productName[0];
    }
    $ordered[$letter][] = l($product->name, 'products/' . $product->id, array('attributes' => array('title' => $product->name)));
  }

  ksort($ordered);
  return $ordered;
}

function pcproducts_search_info() {
  return array(
      'title' => 'Products',
  );
}

function pcproducts_search_access() {
  return user_access('access content');
}

function pcproducts_search_execute($search) {
  $products = Factory::Search($search);
  $items = array();
  foreach ($products->items as $product) {
    $title = $product->name;
    $build = array(
        'short' => array(
            '#type' => 'container',
            '#attributes' => array('class' => array('description')),
            'content' => array(
                '#markup' => $product->shortDescription,
            ),
        ),
        'image' => array(
            '#type' => 'container',
            '#attributes' => array('class' => array('image')),
            'content' => array(
                '#theme' => 'image',
                '#path' => printconnect_getimage('products', $product->id),
            ),
        ),
    );

    $items[] = array(
        'image' => _pcproducts_getimage('products', $product->id),
        'title' => $title,
        'link' => url('products/' . $product->id, array('absolute' => TRUE)),
        'type' => 'pcproducts_product,',
        'snippet' => drupal_render($build),
        'score' => 2,
    );
  }
  return $items;
}

function pcproducts_block_info() {
  $blocks['productinfo'] = array(
      'info' => t('Product info'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['templates'] = array(
      'info' => t('Product templates'),
  );
  $blocks['alphalist'] = array(
      'info' => t('Products alphanumeric list'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['list'] = array(
      'info' => t('Products list'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['top'] = array(
      'info' => t('Products top'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['upsell'] = array(
      'info' => t('Products upselling'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['other'] = array(
      'info' => t('Products others also bought'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['calculator'] = array(
      'info' => t('Products calculator'),
      'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function pcproducts_block_view($delta = '') {
  global $pcproductsProductId;
  global $pcproductsProductItems;
  global $language;

  $block = array();
  $args = arg();

  switch ($delta) {
    case 'alphalist':
      $list = _pcproducts_alpha_array();
      $block['title'] = t('All products');
      $i = 0;
      $col = 0;
      foreach ($list as $key => $products) {
        if ($i == 0) {
          $block['content'][$col] = array(
              '#type' => 'container',
              '#attributes' => array('class' => array('col')),
          );
        }
        $block['content'][$col][$key]['title'] = array('#markup' => '<div class="initial-letter">' . $key . '</div>');
        $block['content'][$col][$key]['list'] = array('#markup' => theme('item_list', array('items' => $products)));
        $i+=count($products);
        $i++;
        if ($i >= 15) {
          $col++;
          $i = 0;
        }
      }
      break;
    case 'list':
        $products = _pcproducts_activeProducts();
        $block['title'] = t('All products');
        usort($products, function ($a, $b) {
            return strcmp($a->name, $b->name);
        });

        $i=0;
        $data = null;
        $total = count($products);
        
        foreach ($products as $product) {
            if( ($i % (intval($total/3)+1))  == 0 && $i <> 0 && $i <> $total ) $data .= '</ul><ul class="menu">';
            $data .= '<li>'.l($product->name, 'products/' . $product->id).'</li>';
            $i++;
        }
        $block['content']['products']['list'] = array('#markup' => '<div class="item-list"><ul class="menu">'.$data.'</ul></div>' );
       // $block['content']['products']['list'] = array('#markup' => theme('item_list', array('items' => $items, 'attributes' => array('class' => array('menu')))));
        return $block;

      break;
    case 'top':
      $products = Factory::GetTop();
      $items = array();
      $i = 0;
      foreach ($products as $product) {
        $items[] = l($product->name, 'products/' . $product->id);
        if ($i++ >= 9) {
          break;
        }
      }
      $block['title'] = t('Top products');
      $block['content'] = theme('item_list', array('items' => $items, 'type' => 'ol'));
      return $block;
      break;
    case 'other':

      if (arg(0) == 'products' && arg(1)) {
        $productId = arg(1);
        $products = pcproducts_otherproducts($productId);
      } else {
        $products = _pcproducts_activeproducts();
      }

      $block['title'] = t('We also make');
      $others = array();
      $i = 0;
      foreach ($products as $product) {
        $build = array();
        $build['image'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('image')),
        );
        $build['image']['content'] = array(
            '#markup' => theme('image', array('path' => printconnect_getimage('products', $product->id))),
        );
        $build['product'] = array(
            '#prefix' => '<h3>',
            '#suffix' => '</h3>',
            '#markup' => $product->name,
        );

//TEST DP
        if ($_SERVER['HTTP_HOST'] != 'www.printconcept.es') {
          $build['price'] = array(
              '#markup' => theme('price', array('value' => $product->sellPrice)) . '&nbsp;' . t('for @qty pcs.', array('@qty' => $product->quantity)),
          );
        }
        $build['link'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('a-icon')),
        );
        $build['link']['content'] = array(
            '#markup' => l($product->name . ' ' . t('Ordering'), 'products/' . $product->id),
        );

        $others[] = drupal_render($build);
        $i++;

        if ($i >= 3) {
          break;
        }
      }

      $block['content']['list'] = array(
          '#attributes' => array('class' => array('other')),
          '#markup' => theme('item_list', array('items' => $others, 'attributes' => array('class' => array('clearfix')))),
      );

      return $block;
      break;
    case 'upsell':
      $products = _pcproducts_activeproducts();
      $items = array();
      $i = 0;
      foreach ($products as $product) {
        $linkContent = theme('image', array('path' => printconnect_getimage('products', $product->id)));
        $linkContent .= '<h3>' . $product->name . '</h3>';
        $linkContent .= '<div>' . theme('price', array('value' => $product->sellPrice)) . '&nbsp;' . t('for @qty pcs.', array('@qty' => $product->quantity)) . '</div>';
        $content = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('block')),
            'link' => array(
                '#markup' => l($linkContent, 'products/' . $product->id, array('html' => TRUE)),
            )
        );
        $items[] = drupal_render($content);
        $i++;
        if ($i >= 3) {
          break;
        }
      }

      $block['content']['upsell'] = array(
          '#type' => 'fieldset',
          '#title' => t('Also buy'),
      );

      $block['content']['upsell']['list'] = array(
          '#type' => 'container',
          '#attributes' => array(),
      );
      foreach ($items as $item) {
        $block['content']['upsell']['list'][] = array('#markup' => $item);
      }
      return $block;
      break;
    case 'productinfo':
      if ($args[0] == 'products' && count($args) > 1) {
        $productId = arg(1);
        $product = Factory::Get($productId);
        $block['title'] = $product->name;
        $block['content']['info']['image']['#markup'] = theme('image', array('path' => _pcproducts_getimage('products', $product->id)));
        $block['content']['info']['short'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('short-description')),
            'content' => array(
                '#markup' => $product->shortDescription,
            ),
        );
        $block['content']['info']['long'] = array(
            '#type' => 'container',
            '#attributes' => array('class' => array('long-description')),
            'content' => array(
                '#markup' => html_entity_decode($product->longDescription),
            ),
        );
      }
      return $block;
      break;

    case 'templates':
      $args = arg();
      if (variable_get('pc_flow', '') == 'printconcept') {
        $steps = 3;
      } else {
        $steps = 2;
      }

      if ($args[0] == 'products' && count($args) >= $steps) {

        $block['title'] = t('How to prepare your printjob');
        $block['content']['placeholder'] = array(
            '#markup' => '<div id="templates" style="display:none;"><!-- placeholder --></div>',
        );
      }
      return $block;

      if (count($items)) {
        $templates = Templates\Factory::GetTemplates($product->id, $items);
        $templates->EnsureLoaded();
        if (count($templates->items)) {
          $template = $templates->items[0];
          $templates = array();
          $templateImages = $template->templateImages;
          if ($templateImages) {
            foreach ($templateImages as $templateImage) {
              if ($templateImage->type == 'template' /* && $templateImage->language == $language->locale */) {
                $file = $templateImage->file;
                $templates[] = $file;
              }
            }
          }

          if ($template) {
            $block['content']['templates'] = array(
                '#type' => 'container',
                '#title' => t('How to prepare your printjob'),
            );

            $block['content']['templates']['text'] = array(
                '#markup' => t('Finalizing your design? Take into account these requirements:'),
            );

            $rows = array();
            $rows[] = array('data' => array(t('Size'), $template->size), 'no_striping' => TRUE);
            $rows[] = array('data' => array(t('Bleed'), $template->bleed), 'no_striping' => TRUE);
            $rows[] = array('data' => array(t('Color'), $template->colorMode), 'no_striping' => TRUE);
            $rows[] = array('data' => array(t('Resolution'), $template->resolution), 'no_striping' => TRUE);
            $block['content']['templates']['table'] = array(
                '#markup' => theme('table', array('rows' => $rows, 'attributes' => array('class' => array('templates-table')))),
            );
            $block['content']['templates']['link']['#markup'] = l(t('Read more'), 'experttips');
            if (count($templates)) {
              $block['content']['templates']['templates'] = array(
                  '#type' => 'container',
                  '#attributes' => array('class' => array('templates')),
              );
              $block['content']['templates']['templates']['title'] = array(
                  '#markup' => t('Templates'),
                  '#prefix' => '<h3>',
                  '#suffix' => '</h3>',
              );
              $block['content']['templates']['templates']['text'] = array(
                  '#markup' => t('Download your templates here'),
                  '#prefix' => '<div style="width:80%; margin-bottom:10px">',
                  '#suffix' => '</div>',
              );
              $items = array();
              foreach ($templates as $template) {
                $items[] = theme('pcfilesdownloadlink', array('file' => $template));
              }

              $block['content']['templates']['templates']['items']['#markup'] = theme('item_list', array('items' => $items));
            }
          }
        }
      }
      break;
    case 'shipping':
      break;
    case 'calculator':
      $block['title'] = t('Calculator');
      $block['content'] = drupal_get_form('pcproducts_calculator_form');
      break;
  }

  return $block;
}

function _pcproducts_getimage($type, $id) {
  return printconnect_getimage($type, $id);
}

function pcproducts_getimagepath() {
  return array(
      'products' => array(
          'module' => 'pcproducts',
          'path' => 'products',
          'extension' => 'png',
      ),
      'items' => array(
          'module' => 'pcproducts',
          'path' => 'items',
          'extension' => 'png',
      )
  );
}

function pcproducts_js_callback() {
  $args = func_get_args();
  $items = array();
  $subtotal = 0;
  $priceGroupId = $_GET['priceGroupId'];
  $qty = $_GET['custom_quantity'];
  $options = array_shift($args);
  if ($options) {
    $options = explode(',', $options);
  } else {
    $options = array();
  }

  try {
    $productPrice = Pricing\Factory::GetSellPrice($priceGroupId, $qty);
    print json_encode(array(
                'price' => (float) $productPrice,
                'priceperpiece' => $productPrice / $qty,
                'quantity' => (float) $qty,
            ));
  } catch (\Exception $ex) {
    print json_encode(array(
                'price' => 0,
                'priceperpiece' => 0,
                'quantity' => 0,
            ));
  }

  exit;
}

function getFromServer($filename) {
    global $conf;
    $apikey = variable_get('pc_apikey', '');
    
    $rest = $conf['pc_url'];
    $url = "{$rest}json/filename/{$filename}?apikey={$apikey}";
    return file_get_contents($url);
}

function callback_getjson_ajax($action, $productId) {
    header('Cache-Control: public, max-age=' . 3600);
    global $language;

    $siteName = variable_get('pc_site_name', '');
    $jsonPath = variable_get('pc_json_path', '');
    $filename = $siteName . '-' . strtolower($language->native) . '-' . $productId;
    $filePath = $jsonPath . $filename . '.json';
    if(!file_exists($filePath)) {
        $jsonFile = getFromServer($filename);
    }else {
        $jsonFile = file_get_contents($filePath);
    }

    echo $jsonFile;exit(0);
}

function pcproducts_validate_product() {
  if (arg(0)=="products") {
    $flag = true;
    $current_id = arg(1);
    $products = _pcproducts_activeproducts();
    foreach ($products as $i => $product) {
      if ($current_id == $product->id){
        $flag = false;
      }
    }
    if ($flag) {
      drupal_not_found();
      exit;
    }
  }
}
function pcproducts_js_form_productWithPromo() {
    $products = Factory::GetProductWithPromo();
    print($products->data);
}
function pcproducts_js_form($productId = 1, $items = '', $options = '', $qty = FALSE, $edit = FALSE) {
    pcproducts_validate_product();
    global $language;
 
    global $user;
    //ini_set('memory_limit', '5000M');
    //ini_set('max_execution_time', '50000');

    $items = ($items == '') ? array() : explode(',', $items);
    $options = ($options == '') ? array() : explode(',', $options);

    $gItems = array();
    foreach ($items as $value) {
        $gItems[] = (int) $value;
    }

    $gOtions = array();
    foreach ($options as $value) {
        $gOtions[] = (int) $value;
    }

    if (!is_numeric($productId)) {
        drupal_not_found();
        exit;
    }

    //drupal_set_breadcrumb(array(l(t('Home'), '<front>'), l(t('Products'), 'products')));
    $bannerUrl = getBannerIfExists($productId);

    $labels = getLabels($edit, $productId);

    $isAdmin = ($user->uid) ? '1' : '0';
    $sitePrintconcept = '';
    
    if (isset($_GET['site']))
    {
      $sitePrintconcept = $_GET['site'];
    }
    
    $script = "<script type='text/javascript'>
        var sitePrintconcept = '". $sitePrintconcept ."';
        var GlobalProductId = ". $productId .";
	var GlobalLabels = ". json_encode($labels) .";
        var GlobalIsAdmin = ". $isAdmin .";
        var GlobalDefaultItems = ".json_encode($gItems).";
        var GlobalDefaultOptions = ".json_encode($gOtions).";
        var GlobalDefaultQuantity = ".(!$qty ? 'null' : $qty).";
        var GlobalJobId = ".(!$edit ? 'null' : $edit).";
        var GlobalPrefix = '".$language->prefix."';
        var GlobalBannerUrl = '".$bannerUrl."';
    </script>";
    $script .= "<style>#box-progress{display: block;}</style>";
    $script .= '<script data-main="/webapp/js/productConfig/main" src="/webapp/js/libs/requirejs/require.js"></script>';
    $script .= '<div id="myForm"></div>';

    return $script;
}

function getLabels($edit = false, $productId) {
    global $language;
    $labels = array(
        "langId" => $language->id,
        "options" => t('Options'),
        "noOptions" => t('No options selected'),
        "quantity" => t('Quantity'),
        "priceNoTVA" => t('Price VAT excl.'),
        "priceWithTVA" => t('Price VAT incl.'),
        "enterQuantity" => t('Enter your amount'),
        "calculate" => t('CALCULER'),
        "totalNoTVA" => t('Total excl. VAT'),
        "addToCart" => $edit ? t('Update') : t('Add to cart'),
        "technicalDetails" => t('Design documents'),
        "technicalDescription" => t('Finalizing your design? Take into account these requirements:'),
        "size" => t('Size'),
        "bleed" => t('Bleed'),
        "color" => t('Color'),
        "resolution" => t('Resolution'),
        "directLink" => t('Direct link'),
        "downloadText" => t('Download all design document'),
        "superDeal"=> t('TOP AFFAIRE'),
        "formatToProvide" => t('Format à fourni'),
        "Format" => t('Format'),
        "rawFormat" => t('brut'),
        "finishedFormat" => t('size'),
        "berekenen" => t('Berekenen'),
        "breedte" => t('Breedte'),
        "hoogte" => t('Hoogte'),
        "newCF"=> t('newCF'),
        "msgErrorCF"=> t('msgErrorCF'),
        "msgCFValid"=> t('msgCFValid'),
        "msgErrorCFNotValid"=> t('msgErrorCFNotValid'),
        "msgErrorCFHeightNotValid"=> t('msgErrorCFHeightNotValid'),
        "msgErrorCFWidthNotValid"=> t('msgErrorCFWidthNotValid'),
        "msgErrorCFTolNotValid"=> t('msgErrorCFTolNotValid'),
        "textWidthNotValid"=> t('textWidthNotValid'),
        "textHeightNotValid"=> t('textHeightNotValid'),
        "et"=> t('et'),
        "textTolNotValid"=> t('textTolNotValid'),
        "msgErrorCFNotFloat"=> t('msgErrorCFNotFloat'),
        "infobrut"=> t('infobrut'),
        "infosize"=> t('infosize'),
        "infobleed"=> t('infobleed'),
        "infocolor"=> t('infocolor'),
        "inforesolution"=> t('inforesolution'),
        "ouvrir" =>t('ouvrir'),
        "ourtip" =>t('our tip'),
        "linkText" =>t('Link text'),
        "linkToConftemplate" =>t('linkToConftemplate'),
        "productdescription" =>t('info for ' . $productId),
        "linkToControl" =>t('linkToControl'),
        "linkTextControl" =>t('linkTextControl'),
        
    );

    for($i=0; $i <= 114; $i++) {
        $labels['toolBoxDescription_'.$i] = t('description on toolbox ' . $i);
    }

    return $labels;
}

function callback_shippingdate_ajax() {
    $output = drupal_render(drupal_get_form('build_shipping_type_form'));

    echo $output;die;
}

function build_shipping_type_form($form, &$form_state) {
    $productId = (isset($_POST['productId']) ? $_POST['productId'] : 1);
    $items = (isset($_POST['items']) ? $_POST['items'] : array(1, 18, 10));
    $options = (isset($_POST['options']) ? $_POST['options'] : array());
    $qty = (isset($_POST['quantity']) ? $_POST['quantity'] : 10);

    $shipsIn = FALSE;
    $deliveryDate = FALSE;
    $shipping = \printconnect\Products\Shipping\Factory::Get($productId, $items, $options, $qty);
    if (count($shipping->items)) {
        $firstDeadline = $shipping->items[0];
        $deadlineDate = $firstDeadline->deadlineDate;
        if (isset($deadlineDate)) {
            $deadlineDate = strtotime($deadlineDate);
        }
        $shippingDate = $firstDeadline->shippingDate;
        if (isset($shippingDate)) {
            $datetime1 = new DateTime('now');
            $datetime2 = new DateTime($shippingDate);
            $shippingDate = strtotime($shippingDate);
        }
        $deliveryDate = $firstDeadline->deliveryDate;
        if (isset($deliveryDate)) {
            $deliveryDate = strtotime($deliveryDate);
        }

        if (isset($deadlineDate) && isset($shippingDate)) {
            $dt1 = new DateTime(date('Y-m-d', $deadlineDate));
            $dt2 = new DateTime(date('Y-m-d', $shippingDate));
            $shipsIn = $dt1->diff($dt2);
            $shipsIn = $shipsIn->days;
        }

        if ($deliveryDate) {
            $form['shipping'] = array(
                '#type' => 'fieldset',
                '#attributes' => array('class' => array('shipping')),
                '#title' => t('Expected delivery'),
            );
            $form['shipping']['deadline'] = array(
                '#type' => 'container',
                '#attributes' => array('class' => array('deadline')),
            );
            $form['shipping']['deadline']['date'] = array(
                '#type' => 'item',
                '#title' => t('Supply before @time', array('@time' => format_date($deadlineDate, 'custom', 'H:i'))),
                '#markup' => '<span class="day">' . format_date($deadlineDate, 'weekday') . '</span><span class="date">' . format_date($deadlineDate, 'custom', 'd/m') . '</span>',
            );
            $form['shipping']['delivery'] = array(
                '#type' => 'container',
                '#attributes' => array('class' => array('delivery')),
            );

            $form['shipping']['delivery']['date'] = array(
                '#type' => 'item',
                '#title' => t('Expected delivery'),
                '#markup' => '<span class="day">' . format_date($deliveryDate, 'weekday') . '</span><span class="date">' . format_date($deliveryDate, 'custom', 'd/m') . '</span>',
            );
        }
    }

    $rows = array();
    foreach ($shipping->items as $deadline) {
        $rows[] = array(
            array(
                'class' => array('supply'),
                'data' => \printconnect\Drupal\Functions::FormatDate(strtotime($deadline->deadlineDate), 'weekdayhour'),
            ),
            array(
                'class' => array('delivery'),
                'data' => format_date(strtotime($deadline->deliveryDate), 'weekday'),
            ),
        );
    }
    $form['shipping']['deadlines']['tooltip']['content'] = array(
        '#type' => 'fieldset',
        '#collapsible' => true,
        '#collapsed' => true,
        '#title' => '<a class="fieldset-title" href="#"><span class="fieldset-legend-prefix element-invisible">Masquer</span> '.t('Supply times').'</a>',
        '#attributes' => array('class' => array('deadlines')),
        '#id' => 'deadlinestooltip',
        'table' => array(
            '#theme' => 'table',
            '#rows' => $rows,
            '#header' => array(t('Supply before'), t('Expected delivery')),
        ),
        'notice' => array('#markup' => t('Depending on your delivery address...')),
    );

    return $form;
}

function _pcproducts_activeproducts($all = FALSE) {
  global $user;
  $allProducts = _pcproducts_array($all);
  $order = explode(',', variable_get('pcproducts_order', ''));
  $result = array();
  /*foreach ($order as $productId) {
    if (isset($allProducts[$productId])) {
      $product = $allProducts[$productId];
      $result[] = $product;
      unset($allProducts[$productId]);
    }
  }
  
  foreach ($allProducts as $productId => $product) {
    if ($product->active) {
      $result[] = $product;
    }
  }*/

  return array_values($allProducts);
}

function _pcproducts_array($all = FALSE) {
  $products = Factory::GetAll(FALSE, FALSE, $all);
  $result = array();
  foreach ($products as $product) {
    $result[$product->id] = $product;
  }
  return $result;
}

function pcproducts_otherproducts($productId) {
  $otherProducts = Factory::GetOAB($productId);
  $result = array();
  $allProducts = _pcproducts_array();
  foreach ($otherProducts as $product) {
    if ($product->id != $productId && isset($allProducts[$product->id])) {
      $result[] = $allProducts[$product->id];
    }
  }

  return $result;
}

function pcproducts_pcsitemap() {
  $items['pcproducts'] = array(
      '#title' => t('Products'),
      '#link' => 'products',
      '#weight' => 50,
  );
  $products = Factory::GetAll();
  foreach ($products as $product) {
    if ($product->active) {
      $items['pcproducts'][$product->id] = array(
          '#title' => $product->name,
          '#link' => 'products/' . $product->id,
      );

      if (variable_get('pcproducts_overviewenabled', false)) {
        $typeItems = Configurations\Factory::GetTypeItems($product->id);
        foreach ($typeItems as $typeItem) {
          $items['pcproducts'][$product->id][$typeItem->id] = array(
              '#title' => $typeItem->name,
              '#link' => 'products/' . $product->id . '/' . $typeItem->id,
          );
        }
      }
    }
  }

  return $items;
}

function pcproducts_preprocess_html(&$vars) {
  $arg = arg();
  if (arg(0) == 'products' && count(arg()) == 2) {
    $productId = arg(1);
    if (is_numeric($productId)) {
      $product = Factory::Get($productId);
      $vars['head_title'] = t('@product, ordering @product', array('@product' => $product->name)) . ' | ' . check_plain(variable_get('site_name', 'Drupal'));
    }
  }
}

function pcproducts_flush_caches() {
}

function pcproducts_cron() {
  _pcproducts_rebuildaliasses();
}

function revert_vertical($items, $numCols) {
    $nbr = count($items) / $numCols;
	$nbr = is_double($nbr) ? $nbr + 1 : $nbr;
	
	$result = array();
	
	foreach ($items as $key => $value) {
		$result[] = array($key%$nbr, $value);
	}
	
	uasort($result, function ($a, $b) {
        if ($a == $b) {
        return 0;
	    }
	    return ($a < $b) ? -1 : 1;
    });
	
	$items = array();
	foreach ($result as $r) {
	    $items[] = $r[1];
	}
	
   	return $items;
}

function pcproducts_calculator_form($form, &$form_state) {
    $products = Factory::GetAll();
    $items = array();

    $products = $products->items;
    usort($products, function (Product $a, Product $b) {
            return strcmp(t($a->name), t($b->name));
    });
	
    foreach ($products as $product) {
      $items[$product->id] = $product->name;
    }
	
	
  $form['about'] = array(
      '#type' => 'item',
      '#markup' => t('About product calculator'),
  );

  $form['product'] = array(
      '#type' => 'select',
      '#options' => $items,
      '#default_value' => 0,
      '#empty_option' => t('Choose a product'),
      '#empty_value' => 0,
      '#ajax' => array(
          'callback' => 'pcproducts_calculator_form_callback',
          'wrapper' => 'pcproducts-calculator-form',
          'method' => 'replace',
          'effect' => 'fade',
          'progress' => array(
              'message' => NULL,
              'type' => NULL,
          ),
      ),
      '#attributes' => array('class' => array('product')),
  );
  $form['type'] = array(
      '#id' => 'edit-type',
      '#type' => 'select',
      '#options' => array(),
      '#default_value' => 0,
      '#empty_option' => t('Choose size or shape'),
      '#empty_value' => 0,
      '#disabled' => true,
      '#attributes' => array('class' => array('type', 'type_product')),
  );
  if (isset($form_state['values']['product'])) {
    $productId = $form_state['values']['product'];
    $items = array();
    if ($productId) {
      $typeItems = Configurations\Factory::GetTypeItems($productId);

      foreach ($typeItems as $item) {
        $detail = $item->detail;
        $text = $item->name;
        if ($detail) {
          $text .= ' (' . $detail . ')';
        }
        $items[$GLOBALS['base_url'] . '/products/' . $productId . '/' . $item->id] = $text;
      };

      $form['type']['#options'] = $items;
      $form['type']['#disabled'] = false;
    }
  }


  $form['#cache'] = TRUE;
  $form_state['cache'] = TRUE;
  $form['#id'] = 'pcproducts-calculator-form';
  return $form;
}

function pcproducts_calculator_form_callback(&$form, &$form_state) {
  return $form;
}

function pcproducts_calculator_form_submit(&$form, &$form_state) {
  $productId = $form_state['values']['product'];
  if ($productId) {
    $productId = $form_state['values']['product'];
    $typeId = $form_state['values']['type'];
    if ($typeId) {
      drupal_goto('products/' . $productId . '/' . $typeId);
    }
    drupal_goto('products/' . $productId);
  }
  drupal_goto('products');
}

function _pcproducts_rebuildaliasses() {

  $languages = \printconnect\Drupal\Functions::GetLanguages();

  foreach ($languages as $language) {

    $products = Factory::GetAll($language);

    foreach ($products as $product) {
      $path = path_load(array(
          'source' => "products/$product->id",
          'language' => $language->language
              ));
      $path['source'] = "products/$product->id";
      $path['alias'] = _pcproducts_url_name(t('Products', array(), array('langcode' => $language->language))) . '/' . _pcproducts_url_name($product->name);
      $path['language'] = $language->language;
      path_save($path);
      if (variable_get('pc_flow', '') == 'printconcept') {
        $typeItems = Configurations\Factory::GetTypeItems($product->id);
        foreach ($typeItems as $typeItem) {
          $typeItem = Toolbox\Factory::Get($typeItem->id, $language);
          $typeItem->EnsureLoaded();
          $path = path_load(array(
              'source' => "products/$product->id/$typeItem->id",
              'language' => $language->language
                  ));

          $path['source'] = "products/$product->id/$typeItem->id";
          $path['alias'] = _pcproducts_url_name(t('Products', array(), array('langcode' => $language->language))) . '/' . _pcproducts_url_name($product->name) . '/' . _pcproducts_url_name($typeItem->name);
          $path['language'] = $language->language;
          path_save($path);
        }
      }
    }

    $path = path_load(array(
        'source' => "products",
        'language' => $language->language
            ));

    $path['source'] = "products";
    $path['alias'] = _pcproducts_url_name(t('Products', array(), array('langcode' => $language->language)));
    $path['language'] = $language->language;
    path_save($path);
    drupal_set_message(t('Product url aliasses rebuilt for ') . $language->language);
  }
}

function _pcproducts_url_name($value, $separator = '-') {
  $pattern = '/[^a-zA-Z0-9]+/';
  $output = strtolower(trim($value));
 $output = str_replace(array('é', 'è', 'ë', 'ê', 'à', 'á', 'â', 'ó', 'ô', 'í'), array('e', 'e', 'e', 'e', 'a', 'a', 'a', 'o', 'o', 'i'), $output);  $output = preg_replace($pattern, $separator, $output);
  return $output;
}

function _pcproducts_getproductname($id) {
   // echo drupal_get_path_alias('products/1');die;
  if (is_numeric($id)) {
    printconnect_ensureinitialized();
    $product = \printconnect\Products\Factory::Get($id);
	\printconnect\Products\Factory::LoadProduct($product);
    return $product->name;
  }
}

function _pcproducts_getitemname($id) {
  if (is_numeric($id)) {
    printconnect_ensureinitialized();
    $item = \printconnect\Products\Toolbox\Factory::Get($id);
    return $item->name;
  }
}

function pcproducts_filter_info() {
  $filters = array();
  $filters['pcproducts'] = array(
      'title' => 'Product variables',
      'description' => 'Print product variables ex. price, name...',
      'process callback' => 'pcproducts_filter',
      'tips callback' => '_pcproducts_filter_tips',
      'cache' => FALSE,
  );
  return $filters;
}

function _pcproducts_filter_tips($filter, $format, $long) {
  if ($long) {
    return '<h4>Using product variables</h4>
      <ul>
      <li>Print price for product 1, items 1 & 10 and qty 10: <pre>{"type":"product","id":1,"items":[1,10], "qty":10, "property":"price"}</pre></li>
       <li>Print product name: <pre>{"type":"product","id":1, "property":"name"}</pre></li>
       <li>Print product baseline: <pre>{"type":"product","id": 1, "property":"baseline"}</pre></li>
       <li>Print product image: <pre>{"type":"product","id": 1, "property":"image"}</pre></li>
       </ul>';
  } else {
    return 'Print product variables ex. price, name...';
  }
}

function pcproducts_filter($code) {
  $matches = array();
  preg_match_all('/\{([^\}]*)\}/', $code, $matches);
  foreach ($matches[0] as $match) {
    $item = json_decode($match);
    if ($item) {
      switch ($item->type) {
        case 'product':
          $id = $item->id;
          switch ($item->property) {
            case 'price':
              $items = $item->items;
              $qty = $item->qty;
              $defaults = Configurations\Factory::GetDefaults($id, $items);
              $priceGroupId = $defaults->priceGroupId;
              $price = Pricing\Factory::GetSellPrice($priceGroupId, $qty);
              $build = array(
                  '#theme' => 'price',
                  '#value' => $price,
              );
              $output = drupal_render($build);
              $code = str_replace($match, $output, $code);
              break;
            case 'name':
              $product = Factory::Get($id);
              $output = $product->name;
              $code = str_replace($match, $output, $code);
              break;
            case 'baseline':
              $product = Factory::Get($id);
              $output = $product->baseline;
              $code = str_replace($match, $output, $code);
              break;
            case 'image':
              $build = array(
                  '#theme' => 'image',
                  '#path' => printconnect_getimage('products', $id),
              );
              $output = drupal_render($build);
              $code = str_replace($match, $output, $code);
              break;
          }
      }
    }
  }
  return $code;
}

function pcproducts_pcmenumain() {
    // desactiver l'onglet produits A-Z
   // return ;
  $shop = \printconnect\Shop\Configuration\Factory::Current();
  if(35 === $shop->id) return ;
  $alphaArray = _pcproducts_alpha_array();
  
  $menuItems['product'] = array(
      '#title' => t('Products'),
      '#link' => 'products',
      '#description' => t('Our product catalog'),
      '#weight' => 10,
      '#dropdown' => array(
          'products' => array(
              '#type' => 'container',
              '#attributes' => array('class' => array('products', 'clearfix')),
              'header' => array('#markup' => '<h2>' . t('Products A-Z') . '</h2>'),
              'second' => array(
                  '#type' => 'container',
                  '#attributes' => array('class' => array('sepcond','ctn-menu-dropdown','isotope')),
              ),
          ),
      ),
  );

    $content[0] = $alphaArray;
    foreach ($content[0] as $letter => $products) {
    $menuItems['product']['#dropdown']['products']['second'][$letter] = array(
        'header' => array('#markup' => '<div class="item-box box-'. $letter . '"><h2>' . $letter . '</h2>'),
        'list' => array('#markup' => theme('item_list', array('items' => $products)) . '</div>'),
        );
    }
  return $menuItems;
}


function getBannerIfExists($productId)
{
    global $language;
    switch ($language->prefix) {
        case 'befr':
        case 'frfr':
            $prefix = 'fr';
            break;
        case 'lufr':
            $prefix = 'lufr';
            break;
        case 'benl':
            $prefix = 'nl';
            break;
        case 'nlnl':
            $prefix = 'nlnl';
            break;
        case 'lunl':
            $prefix = 'nl';
            break;
        case 'en':
            $prefix = 'en';
            break;

        default:
            break;
    }

    $bannerUrl = variable_get('pc_images') . '/productpage_banners/banner_'.$prefix.'_'.$productId.'.jpg';
    $bannerUrl2 = variable_get('pc_images') . '/productpage_banners/banner_'.$prefix.'_'.$productId.'.png';

    if (getimagesize($bannerUrl) != FALSE || getimagesize($bannerUrl2) != FALSE){
        $bannerUrl = (getimagesize($bannerUrl)) ? $bannerUrl : $bannerUrl2;

        return $bannerUrl;
    }

    return '';
}

function pcproducts_xmlsitemap_link_info() {
  return array(
    'pcproducts' => array(
      'label' => t('pcproducts'),
      'xmlsitemap' => array(
        'rebuild callback' => 'pcproducts_xmlsitemap_index_links',
        ),
      )
    );
}
function pcproducts_xmlsitemap_index_links($limit) {
    $products = _pcproducts_activeproducts();
    foreach ($products as $product) {
        $link = array(
          'type' => 'products',
          'loc' => 'products/'.$product->id,
          'access' => 1,
          'status' => 1,
        );
        xmlsitemap_link_save($link);
    }
  
}
